{"version":3,"sources":["webpack:///./src/components/json/HomeJsonLd.tsx","webpack:///./src/pages/index.tsx"],"names":["JsonLD","react_default","a","createElement","gatsby_browser_entry","query","jsonLdHomeQuery","render","data","_data$site$siteMetada","site","siteMetadata","title","siteUrl","description","author","jsonLd","@context","@type","image","url","height","width","name","publisher","logo","Helmet_default","type","JSON","stringify","_1777364483","BlogIndex","this","props","categories","siteTitle","posts","allMarkdownRemark","edges","location","Layout","SEO","rel","href","HomeJsonLd","CategoryMenu","map","_ref","node","PostCard","key","fields","slug","React","Component","pageQuery"],"mappings":"kKAoDeA,EA/CA,WACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GAAsB,IAAAC,EACmBD,EAAKE,KAAKC,aAAlDC,EADqBH,EACrBG,MAAOC,EADcJ,EACdI,QAASC,EADKL,EACLK,YAAaC,EADRN,EACQM,OAa/BC,EAAS,CACbC,WAAY,oBACZC,QAAS,UACTC,MAAS,CACPD,QAAS,cACTE,IAAUP,EAAV,kBACAQ,OAAU,KACVC,MAAS,KAEXF,IAAOP,EACPU,KAAQX,EACRG,OAAU,CACRG,QAAS,SACTK,KAAQR,GAEVD,YAAeA,EACfU,UA3BgB,CAChBN,QAAS,eACTK,KAAQR,EACRU,KAAQ,CACNP,QAAS,cACTE,IAAUP,EAAV,qBACAS,MAAS,IACTD,OAAU,OAuBd,OACEpB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,KACED,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,uBAAuBC,KAAKC,UAAUb,MArC3DR,KAAAsB,KA+CExB,EAAe,oFCxCfyB,kLACJxB,OAAA,WAAS,IACCC,EAASwB,KAAKC,MAAdzB,KACF0B,EAAa1B,EAAKE,KAAKC,aAAauB,WACpCC,EAAY3B,EAAKE,KAAKC,aAAaC,MACnCwB,EAAQ5B,EAAK6B,kBAAkBC,MAC7BC,EAAaP,KAAKC,MAAlBM,SAER,OACEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQD,SAAUP,KAAKC,MAAMM,SAAU3B,MAAOuB,GAC5ClC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAK7B,MAAM,KACXX,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,KACED,EAAAC,EAAAC,cAAA,QAAMuC,IAAI,YAAYC,KAAK,+BAE7B1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAcN,SAAUA,EAAUL,WAAYA,IAC7CE,EAAMU,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACZ,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAUC,IAAKF,EAAKG,OAAOC,KAAMJ,KAAMA,WAjBhCK,IAAMC,WA0BjBC,GAFExB,YAEO","file":"component---src-pages-index-tsx-56ea580d69518a9539e9.js","sourcesContent":["import { graphql, StaticQuery } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { QueryResult } from '../../models';\n\nconst JsonLD = () => {\n  return (\n    <StaticQuery\n      query={jsonLdHomeQuery}\n      render={(data: QueryResult) => {\n        const { title, siteUrl, description, author } = data.site.siteMetadata;\n\n        const publisher = {\n          '@type': 'Organization',\n          'name': author,\n          'logo': {\n            '@type': 'ImageObject',\n            'url': `${siteUrl}/images/avatar.png`,\n            'width': 150,\n            'height': 150,\n          },\n        };\n\n        const jsonLd = {\n          '@context': 'http://schema.org',\n          '@type': 'WebSite',\n          'image': {\n            '@type': 'ImageObject',\n            'url': `${siteUrl}/images/ogp.png`,\n            'height': 1200,\n            'width': 630,\n          },\n          'url': siteUrl,\n          'name': title,\n          'author': {\n            '@type': 'Person',\n            'name': author,\n          },\n          'description': description,\n          publisher,\n        };\n\n        return (\n          <Helmet>\n            <script type='application/ld+json'>{JSON.stringify(jsonLd)}</script>\n          </Helmet>\n        );\n      }}\n    />\n  );\n};\n\nexport default JsonLD;\n\nconst jsonLdHomeQuery = graphql`\n  query JsonLdHomeQuery {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        description\n        author\n      }\n    }\n  }\n`;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport CategoryMenu from '../components/CategoryMenu';\nimport HomeJsonLd from '../components/json/HomeJsonLd';\nimport Layout from '../components/Layout';\nimport PostCard from '../components/PostCard';\nimport SEO from '../components/SEO';\nimport { QueryResult } from '../models';\n\ninterface Props {\n  data: QueryResult;\n  location: any;\n}\nclass BlogIndex extends React.Component<Props> {\n  render() {\n    const { data } = this.props;\n    const categories = data.site.siteMetadata.categories;\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n    const { location } = this.props;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"\" />\n        <Helmet>\n          <link rel=\"canonical\" href=\"https://wwlee94.github.io\" />\n        </Helmet>\n        <HomeJsonLd />\n        <CategoryMenu location={location} categories={categories} />\n        {posts.map(({ node }) => {\n          return <PostCard key={node.fields.slug} node={node} />;\n        })}\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        categories {\n          name\n          icon\n          link\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            emoji\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}