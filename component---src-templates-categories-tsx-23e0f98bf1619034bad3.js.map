{"version":3,"sources":["webpack:///./src/components/json/CategoryJsonLd.tsx","webpack:///./src/templates/categories.tsx"],"names":["CategoryJsonLD","_ref","categorySlug","categoryName","react_default","a","createElement","gatsby_browser_entry","query","jsonLdCategoryQuery","render","data","siteUrl","site","siteMetadata","jsonBreadCrumbs","@context","@type","itemListElement","position","item","@id","name","Helmet_default","type","JSON","stringify","_4218501782","Heading","styled","h1","withConfig","displayName","componentId","CategoryTemplate","_this$props","this","props","pageContext","posts","allMarkdownRemark","edges","location","category","categories","categoryObject","find","cat","slug","Layout","title","SEO","CategoryJsonLd","CategoryMenu","map","node","PostCard","key","fields","React","Component","pageQuery"],"mappings":"wLAmDeA,EAzCQ,SAAAC,GAA2C,IAAxCC,EAAwCD,EAAxCC,aAAcC,EAA0BF,EAA1BE,aACtC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GAAsB,IACrBC,EAAYD,EAAKE,KAAKC,aAAtBF,QAEFG,EAAkB,CACtBC,WAAY,oBACZC,QAAS,iBACTC,gBAAmB,CACjB,CACED,QAAS,WACTE,SAAY,EACZC,KAAQ,CACNC,MAAOT,EACPU,KAAQ,SAGZ,CACEL,QAAS,WACTE,SAAY,EACZC,KAAQ,CACNC,MAAUT,EAAV,IAAqBV,EACrBoB,KAAQnB,MAKhB,OACEC,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,KACED,EAAAC,EAAAC,cAAA,UAAQkB,KAAK,uBACVC,KAAKC,UAAUX,MA9B1BJ,KAAAgB,KAyCElB,EAAmB,gFC1CzB,IAAMmB,EAAUC,IAAOC,GAAVC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,YAAGJ,CAAH,yGAcPK,kLACJxB,OAAA,WAAS,IAAAyB,EACuBC,KAAKC,MAA3B1B,EADDwB,EACCxB,KAAM2B,EADPH,EACOG,YACRC,EAAQ5B,EAAK6B,kBAAkBC,MAC7BC,EAAaN,KAAKC,MAAlBK,SAEFxC,EAAeoC,EAAYK,SAC3BC,EAAajC,EAAKE,KAAKC,aAAa8B,WACpCC,EAAiBD,EAAWE,KAAK,SAACC,GACtC,OAAOA,EAAIC,OAAS9C,IAIhBC,EAAe0C,EAAiBA,EAAevB,KAAOpB,EAE5D,OACEE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQP,SAAUN,KAAKC,MAAMK,SAAUQ,MAAO/C,GAC5CC,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKD,MAAO/C,IACZC,EAAAC,EAAAC,cAAC8C,EAAD,CACElD,aAAcA,EACdC,aAAcA,IAEhBC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAcX,SAAUA,EAAUE,WAAYA,IAC9CxC,EAAAC,EAAAC,cAACsB,EAAD,KAAUzB,GACToC,EAAMe,IAAI,SAAArD,GAAc,IAAXsD,EAAWtD,EAAXsD,KACZ,OAAOnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUC,IAAKF,EAAKG,OAAOV,KAAMO,KAAMA,WAzBzBI,IAAMC,WAkCxBC,GAFE3B,YAEO","file":"component---src-templates-categories-tsx-23e0f98bf1619034bad3.js","sourcesContent":["import { graphql, StaticQuery } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { QueryResult } from '../../models';\n\ninterface Props {\n  categorySlug: string;\n  categoryName: string;\n}\n\nconst CategoryJsonLD = ({ categorySlug, categoryName }: Props) => {\n  return (\n    <StaticQuery\n      query={jsonLdCategoryQuery}\n      render={(data: QueryResult) => {\n        const { siteUrl } = data.site.siteMetadata;\n        // bread crumbs\n        const jsonBreadCrumbs = {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          'itemListElement': [\n            {\n              '@type': 'ListItem',\n              'position': 1,\n              'item': {\n                '@id': siteUrl,\n                'name': 'HOME',\n              },\n            },\n            {\n              '@type': 'ListItem',\n              'position': 2,\n              'item': {\n                '@id': `${siteUrl}/${categorySlug}`,\n                'name': categoryName,\n              },\n            },\n          ],\n        };\n        return (\n          <Helmet>\n            <script type='application/ld+json'>\n              {JSON.stringify(jsonBreadCrumbs)}\n            </script>\n          </Helmet>\n        );\n      }}\n    />\n  );\n};\n\nexport default CategoryJsonLD;\n\nconst jsonLdCategoryQuery = graphql`\n  query jsonLdCategoryQuery {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\nimport CategoryMenu from '../components/CategoryMenu';\nimport CategoryJsonLd from '../components/json/CategoryJsonLd';\nimport Layout from '../components/Layout';\nimport PostCard from '../components/PostCard';\nimport SEO from '../components/SEO';\nimport { QueryResult } from '../models';\nimport { CategoryPageContext } from '../models';\n\nconst Heading = styled.h1`\n  margin: 0.5em 0 0.8em;\n  font-size: 32px;\n  color: #fff;\n  font-weight: 700;\n  line-height: 44px;\n  letter-spacing: 1px;\n`;\n\ninterface Props {\n  data: QueryResult;\n  pageContext: CategoryPageContext;\n  location: any;\n}\nclass CategoryTemplate extends React.Component<Props> {\n  render() {\n    const { data, pageContext } = this.props;\n    const posts = data.allMarkdownRemark.edges;\n    const { location } = this.props;\n    // get Category name from category slug\n    const categorySlug = pageContext.category;\n    const categories = data.site.siteMetadata.categories;\n    const categoryObject = categories.find((cat) => {\n      return cat.slug === categorySlug;\n    });\n    \n    // use slug when name doesn't exist\n    const categoryName = categoryObject ? categoryObject.name : categorySlug;\n\n    return (\n      <Layout location={this.props.location} title={categoryName}>\n        <SEO title={categoryName} />\n        <CategoryJsonLd\n          categorySlug={categorySlug}\n          categoryName={categoryName}\n        />\n        <CategoryMenu location={location} categories={categories} />\n        <Heading>{categoryName}</Heading>\n        {posts.map(({ node }) => {\n          return <PostCard key={node.fields.slug} node={node} />;\n        })}\n      </Layout>\n    );\n  }\n}\n\nexport default CategoryTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostByCategory($category: String) {\n    site {\n      siteMetadata {\n        categories {\n          name\n          slug\n          color\n          icon\n          link\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            emoji\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}