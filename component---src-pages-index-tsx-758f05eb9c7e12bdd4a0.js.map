{"version":3,"sources":["webpack:///./src/components/json/HomeJsonLd.tsx","webpack:///./src/pages/index.tsx"],"names":["JsonLD","query","jsonLdHomeQuery","render","data","site","siteMetadata","title","siteUrl","description","author","jsonLd","publisher","type","JSON","stringify","BlogIndex","this","props","categories","siteTitle","posts","allMarkdownRemark","edges","location","Layout","SEO","rel","href","HomeJsonLd","MainWrapper","category","Category","Posts","bio","Bio","tableOfContents","React","Component","CategoryMenu","map","node","PostCard","key","fields","slug","pageQuery"],"mappings":"0OAoDeA,EA/CA,WACb,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GAAsB,MACmBA,EAAKC,KAAKC,aAAlDC,EADqB,EACrBA,MAAOC,EADc,EACdA,QAASC,EADK,EACLA,YAAaC,EADR,EACQA,OAa/BC,EAAS,CACb,WAAY,oBACZ,QAAS,UACT,MAAS,CACP,QAAS,cACT,IAAUH,EAAV,kBACA,OAAU,KACV,MAAS,KAEX,IAAOA,EACP,KAAQD,EACR,OAAU,CACR,QAAS,SACT,KAAQG,GAEV,YAAeD,EACfG,UA3BgB,CAChB,QAAS,eACT,KAAQF,EACR,KAAQ,CACN,QAAS,cACT,IAAUF,EAAV,qBACA,MAAS,IACT,OAAU,OAuBd,OACE,kBAAC,IAAD,KACE,4BAAQK,KAAK,uBAAuBC,KAAKC,UAAUJ,MArC3D,UA+CET,EAAkB,a,oDCtClBc,E,gLACJb,OAAA,WAAS,IACCC,EAASa,KAAKC,MAAdd,KACFe,EAAaf,EAAKC,KAAKC,aAAaa,WACpCC,EAAYhB,EAAKC,KAAKC,aAAaC,MACnCc,EAAQjB,EAAKkB,kBAAkBC,MAC7BC,EAAaP,KAAKC,MAAlBM,SAER,OACE,kBAACC,EAAA,EAAD,CAAQD,SAAUP,KAAKC,MAAMM,SAAUjB,MAAOa,GAC5C,kBAACM,EAAA,EAAD,CAAKnB,MAAM,KACX,kBAAC,IAAD,KACE,0BAAMoB,IAAI,YAAYC,KAAK,+BAE7B,kBAACC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAaC,SAAUC,EAAS,CAAER,WAAUL,eAAeE,MAAOY,EAAM,CAAEZ,UAAUa,IAAK,kBAACC,EAAA,EAAD,MAASC,gBAAiB,S,GAfnGC,IAAMC,WAuBxBN,GAFShB,YAEE,SAAC,GAAkC,IAAhCQ,EAAgC,EAAhCA,SAAUL,EAAsB,EAAtBA,WAC5B,OAAO,kBAACoB,EAAA,EAAD,CAAcf,SAAUA,EAAUL,WAAYA,MAGjDc,EAAQ,SAAC,GACb,OADgC,EAAjBZ,MACFmB,KAAI,YAAmB,IAAhBC,EAAgB,EAAhBA,KAClB,OAAO,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKG,OAAOC,KAAMJ,KAAMA,QAIrCK,EAAY,c","file":"component---src-pages-index-tsx-758f05eb9c7e12bdd4a0.js","sourcesContent":["import { graphql, StaticQuery } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { QueryResult } from '../../models';\n\nconst JsonLD = () => {\n  return (\n    <StaticQuery\n      query={jsonLdHomeQuery}\n      render={(data: QueryResult) => {\n        const { title, siteUrl, description, author } = data.site.siteMetadata;\n\n        const publisher = {\n          '@type': 'Organization',\n          'name': author,\n          'logo': {\n            '@type': 'ImageObject',\n            'url': `${siteUrl}/images/avatar.png`,\n            'width': 150,\n            'height': 150,\n          },\n        };\n\n        const jsonLd = {\n          '@context': 'http://schema.org',\n          '@type': 'WebSite',\n          'image': {\n            '@type': 'ImageObject',\n            'url': `${siteUrl}/images/ogp.png`,\n            'height': 1200,\n            'width': 630,\n          },\n          'url': siteUrl,\n          'name': title,\n          'author': {\n            '@type': 'Person',\n            'name': author,\n          },\n          'description': description,\n          publisher,\n        };\n\n        return (\n          <Helmet>\n            <script type='application/ld+json'>{JSON.stringify(jsonLd)}</script>\n          </Helmet>\n        );\n      }}\n    />\n  );\n};\n\nexport default JsonLD;\n\nconst jsonLdHomeQuery = graphql`\n  query JsonLdHomeQuery {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        description\n        author\n      }\n    }\n  }\n`;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport Bio from '../components/Bio';\nimport CategoryMenu from '../components/CategoryMenu';\nimport HomeJsonLd from '../components/json/HomeJsonLd';\nimport Layout from '../components/Layout';\nimport MainWrapper from '../components/MainWrapper';\nimport PostCard from '../components/PostCard';\nimport SEO from '../components/SEO';\nimport { QueryResult } from '../models';\n\ninterface Props {\n  data: QueryResult;\n  location: any;\n}\nclass BlogIndex extends React.Component<Props> {\n  render() {\n    const { data } = this.props;\n    const categories = data.site.siteMetadata.categories;\n    const siteTitle = data.site.siteMetadata.title;\n    const posts = data.allMarkdownRemark.edges;\n    const { location } = this.props;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"\" />\n        <Helmet>\n          <link rel=\"canonical\" href=\"https://wwlee94.github.io\" />\n        </Helmet>\n        <HomeJsonLd />\n        <MainWrapper category={Category({ location, categories })} posts={Posts({ posts })} bio={<Bio />} tableOfContents={null} />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nconst Category = ({ location, categories }: any) => {\n  return <CategoryMenu location={location} categories={categories} />;\n};\n\nconst Posts = ({ posts }: any) => {\n  return posts.map(({ node }: any) => {\n    return <PostCard key={node.fields.slug} node={node} />;\n  });\n};\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        categories {\n          name\n          icon\n          link\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            emoji\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}