{"version":3,"sources":["webpack:///./src/components/json/CategoryJsonLd.tsx","webpack:///./src/templates/categories.tsx"],"names":["CategoryJsonLD","categorySlug","categoryName","query","jsonLdCategoryQuery","render","data","siteUrl","site","siteMetadata","jsonBreadCrumbs","type","JSON","stringify","Heading","styled","h1","props","theme","category","header","CategoryTemplate","this","pageContext","posts","allMarkdownRemark","edges","location","categories","categoryObject","find","cat","slug","name","Layout","title","SEO","CategoryJsonLd","CategoryMenu","map","node","PostCard","key","fields","React","Component","pageQuery"],"mappings":"qXAmDeA,EAzCQ,SAAC,GAA0C,IAAxCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,aACtC,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GAAsB,IACrBC,EAAYD,EAAKE,KAAKC,aAAtBF,QAEFG,EAAkB,CACtB,WAAY,oBACZ,QAAS,iBACT,gBAAmB,CACjB,CACE,QAAS,WACT,SAAY,EACZ,KAAQ,CACN,MAAOH,EACP,KAAQ,SAGZ,CACE,QAAS,WACT,SAAY,EACZ,KAAQ,CACN,MAAUA,EAAV,IAAqBN,EACrB,KAAQC,MAKhB,OACE,kBAAC,IAAD,KACE,4BAAQS,KAAK,uBACVC,KAAKC,UAAUH,MA9B1B,UAyCEN,EAAsB,Y,oCC3C5B,IAAMU,EAAUC,IAAOC,GAAV,0EAAGD,CAAH,2IAIF,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,SAASC,UAWnCC,E,gLACJhB,OAAA,WAAS,MACuBiB,KAAKL,MAA3BX,EADD,EACCA,KAAMiB,EADP,EACOA,YACRC,EAAQlB,EAAKmB,kBAAkBC,MAC7BC,EAAaL,KAAKL,MAAlBU,SAEF1B,EAAesB,EAAYJ,SAC3BS,EAAatB,EAAKE,KAAKC,aAAamB,WACpCC,EAAiBD,EAAWE,MAAK,SAAAC,GACrC,OAAOA,EAAIC,OAAS/B,KAIhBC,EAAe2B,EAAiBA,EAAeI,KAAOhC,EAE5D,OACE,kBAACiC,EAAA,EAAD,CAAQP,SAAUL,KAAKL,MAAMU,SAAUQ,MAAOjC,GAC5C,kBAACkC,EAAA,EAAD,CAAKD,MAAOjC,IACZ,kBAACmC,EAAD,CAAgBpC,aAAcA,EAAcC,aAAcA,IAC1D,kBAACoC,EAAA,EAAD,CAAcX,SAAUA,EAAUC,WAAYA,IAC9C,kBAACd,EAAD,KAAUZ,GACTsB,EAAMe,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACZ,OAAO,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKG,OAAOX,KAAMQ,KAAMA,S,GAtBzBI,IAAMC,WA+BxBC,GAFEzB,YAEU","file":"component---src-templates-categories-tsx-c01c53320c0e329ec2a9.js","sourcesContent":["import { graphql, StaticQuery } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { QueryResult } from '../../models';\n\ninterface Props {\n  categorySlug: string;\n  categoryName: string;\n}\n\nconst CategoryJsonLD = ({ categorySlug, categoryName }: Props) => {\n  return (\n    <StaticQuery\n      query={jsonLdCategoryQuery}\n      render={(data: QueryResult) => {\n        const { siteUrl } = data.site.siteMetadata;\n        // bread crumbs\n        const jsonBreadCrumbs = {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          'itemListElement': [\n            {\n              '@type': 'ListItem',\n              'position': 1,\n              'item': {\n                '@id': siteUrl,\n                'name': 'HOME',\n              },\n            },\n            {\n              '@type': 'ListItem',\n              'position': 2,\n              'item': {\n                '@id': `${siteUrl}/${categorySlug}`,\n                'name': categoryName,\n              },\n            },\n          ],\n        };\n        return (\n          <Helmet>\n            <script type='application/ld+json'>\n              {JSON.stringify(jsonBreadCrumbs)}\n            </script>\n          </Helmet>\n        );\n      }}\n    />\n  );\n};\n\nexport default CategoryJsonLD;\n\nconst jsonLdCategoryQuery = graphql`\n  query jsonLdCategoryQuery {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\nimport CategoryMenu from '../components/CategoryMenu';\nimport CategoryJsonLd from '../components/json/CategoryJsonLd';\nimport Layout from '../components/Layout';\nimport PostCard from '../components/PostCard';\nimport SEO from '../components/SEO';\nimport { CategoryPageContext, QueryResult } from '../models';\n\nconst Heading = styled.h1`\n  margin: 0.5em 0 0.8em;\n  font-size: 32px;\n  transition: all 0.3s ease-in-out 0s; /* 테마 변환 시 애니메이션 */\n  color: ${props => props.theme.category.header};\n  font-weight: 700;\n  line-height: 44px;\n  letter-spacing: 1px;\n`;\n\ninterface Props {\n  data: QueryResult;\n  pageContext: CategoryPageContext;\n  location: any;\n}\nclass CategoryTemplate extends React.Component<Props> {\n  render() {\n    const { data, pageContext } = this.props;\n    const posts = data.allMarkdownRemark.edges;\n    const { location } = this.props;\n    // get Category name from category slug\n    const categorySlug = pageContext.category;\n    const categories = data.site.siteMetadata.categories;\n    const categoryObject = categories.find(cat => {\n      return cat.slug === categorySlug;\n    });\n\n    // use slug when name doesn't exist\n    const categoryName = categoryObject ? categoryObject.name : categorySlug;\n\n    return (\n      <Layout location={this.props.location} title={categoryName}>\n        <SEO title={categoryName} />\n        <CategoryJsonLd categorySlug={categorySlug} categoryName={categoryName} />\n        <CategoryMenu location={location} categories={categories} />\n        <Heading>{categoryName}</Heading>\n        {posts.map(({ node }) => {\n          return <PostCard key={node.fields.slug} node={node} />;\n        })}\n      </Layout>\n    );\n  }\n}\n\nexport default CategoryTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostByCategory($category: String) {\n    site {\n      siteMetadata {\n        categories {\n          name\n          slug\n          color\n          icon\n          link\n        }\n      }\n    }\n    allMarkdownRemark(limit: 1000, sort: { fields: [frontmatter___date], order: DESC }, filter: { frontmatter: { category: { eq: $category } } }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            emoji\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}