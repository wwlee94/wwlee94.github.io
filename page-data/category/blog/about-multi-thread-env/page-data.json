{"componentChunkName":"component---src-templates-post-tsx","path":"/category/blog/about-multi-thread-env/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"b99b4d1c-f7f7-5bc2-a7f3-d5e0408b0606","excerpt":"…","html":"<div class=\"custom-block info\"><div class=\"custom-block-body\"><p>스프링 스터디 중에서 나온 의견 나눔에 대한 정리 포스팅입니다.</p></div></div>\n<p>우선 스레드에 대한 개념에 대해서 간단히 살펴보겠습니다.</p>\n<h2 id=\"스레드에-대하여\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\"스레드에 대하여 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드에 대하여</h2>\n<h4 id=\"스레드란-\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80-\" aria-label=\"스레드란  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드란 ?</h4>\n<ul>\n<li>프로세스 안에서 실행되는 작업 단위</li>\n</ul>\n<p><strong>그러면 프로세스는 뭐지 ?</strong></p>\n<p>프로세스는 프로그램이 실행 중인 상태입니다. (하나 이상의 스레드를 포함)</p>\n<p><strong>프로세스와 스레드의 가장 큰 차이점</strong></p>\n<p><code class=\"language-text\">프로세스</code>는 운영체제로부터 자신만의 <code class=\"language-text\">독립적인 고유 공간 + 자원</code>을 할당 받아 동작합니다.</p>\n<p><code class=\"language-text\">스레드</code>는 한 프로세스내에서 여러 흐름으로 동작하며 프로세스 내의 <code class=\"language-text\">주소 공간이나 자원을 공유</code>할 수 있습니다.</p>\n<blockquote>\n<p>프로세스 간 : [데이터 영역, 힙, 스택] 모두를 비 공유합니다.<br>\n스레드 간 : [데이터 영역, 힙, 스택] 중 스택 영역만 비 공유합니다.</p>\n</blockquote>\n<h2 id=\"멀티-스레드란-\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80-\" aria-label=\"멀티 스레드란  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 스레드란 ?</h2>\n<p>하나의 프로세스를 다수의 실행 단위로 구분하여 자원을 공유하고 자원의 생성과 관리의 중복성을 최소화하여 수행 능력을 향상시키는 것을 <code class=\"language-text\">멀티 스레드</code>라고 합니다.</p>\n<p>즉, 하나의 프로그램에서 <code class=\"language-text\">여러 일들을 병렬로 처리</code>하기 위함이라고 할 수 있습니다.</p>\n<h4 id=\"멀티-스레드의-장점\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"멀티 스레드의 장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 스레드의 장점</h4>\n<ol>\n<li>다른 스레드와 <code class=\"language-text\">공간과 자원을 공유</code>하면서 사용</li>\n<li>프로세스에 비해서 스레드는 <code class=\"language-text\">빠르게 생성 + 적은 메모리</code> 사용</li>\n</ol>\n<h4 id=\"멀티-스레드의-단점\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"멀티 스레드의 단점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 스레드의 단점</h4>\n<p>멀티 스레드는 자원을 공유하기 때문에 서로의 자원을 동시에 접근하려 할 때 서로 <code class=\"language-text\">교착 상태(Deadlock)</code>에 빠질 수 있다.</p>\n<p>따라서, 멀티 스레드 환경에서는 <code class=\"language-text\">Deadlock</code>이 발생하지 않도록 <code class=\"language-text\">동기화하는 작업</code>이 필요하다.</p>\n<blockquote>\n<p>동기화 방법에는 여러가지가 있지만 이번 포스팅에서는 다루지 않습니다 !</p>\n</blockquote>\n<h2 id=\"본론-스터디-공유-내용-\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%EB%A1%A0-%EC%8A%A4%ED%84%B0%EB%94%94-%EA%B3%B5%EC%9C%A0-%EB%82%B4%EC%9A%A9-\" aria-label=\"본론 스터디 공유 내용  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[본론] 스터디 공유 내용 !</h2>\n<p>스터디 범위에 ‘싱글톤 레지스트리’ 에 대한 내용을 공유하던 중 아래와 같은 내용이 있었습니다.</p>\n<p><strong>스프링의 애플리케이션 컨텍스트는 기본적으로 하나의 객체만 생성하는 싱글톤으로 관리하기 때문에 멀티 스레드 환경에서 값을 변경하는 방식으로 만들지 않는다.</strong></p>\n<p>하지만, 다음과 같은 질문이 있었습니다.</p>\n<p><strong>만약, 멀티 스레드 환경에서 동작하고 공유 자원이 필요해서 값을 수정해야 할 경우에는 어떻게 처리하는 것이 좋을 까?</strong></p>\n<p>첫번째 의견으로는 Java의 <code class=\"language-text\">synchronized</code> 를 사용하는 방법이 공유되었고</p>\n<p>두번째 의견으로는 <code class=\"language-text\">옵저버 패턴</code>을 사용하는 방법이 공유되었습니다.</p>\n<h4 id=\"java의-synchronized를-사용하는-방법\" style=\"position:relative;\"><a href=\"#java%EC%9D%98-synchronized%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"java의 synchronized를 사용하는 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java의 ‘synchronized’를 사용하는 방법</h4>\n<p><strong>장점</strong></p>\n<ul>\n<li>스레드간 동기화가 해결되며 공유 자원에서 <code class=\"language-text\">컨플릭트</code>가 나지 않는다.</li>\n</ul>\n<p><strong>단점</strong></p>\n<ul>\n<li><code class=\"language-text\">synchronized</code>는 쓰레드가 <code class=\"language-text\">Blocking</code>이 되는 <code class=\"language-text\">Lock</code>에 걸리기 때문에 성능 저하를 가져온다.</li>\n</ul>\n<h4 id=\"옵저버-패턴을-사용하는-방법\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"옵저버 패턴을 사용하는 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵저버 패턴을 사용하는 방법</h4>\n<p>옵저버 패턴을 사용하여 여러 곳을 옵저빙하다가 어느 한 곳에서 변화가 일어나면 이 객체와 관련된 옵저버에게 해당 변화를 전달하는 방식</p>\n<p><strong>장점</strong></p>\n<ul>\n<li><code class=\"language-text\">synchronized</code>에 비해서 성능 저하가 발생하지 않는다.</li>\n</ul>\n<p><strong>단점</strong></p>\n<ul>\n<li>공유 자원의 변경을 전달하는 시간 동안 <code class=\"language-text\">컨플릭트</code>가 발생할 수 있다.</li>\n</ul>\n<blockquote>\n<p>일관성을 보장하지 않을 수도 있다 !</p>\n</blockquote>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>개인적으로 공부한 것 + 공유 내용에 관한 포스팅이므로 틀린 부분이 있을 수 있습니다.</p>\n<p>봐주셔서 감사합니다 ! 🙇🏻‍♂️</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/blog/about-multi-thread-env/#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\">스레드에 대하여</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/about-multi-thread-env/#%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80-\">스레드란 ?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/blog/about-multi-thread-env/#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%9E%80-\">멀티 스레드란 ?</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/about-multi-thread-env/#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\">멀티 스레드의 장점</a></li>\n<li><a href=\"/category/blog/about-multi-thread-env/#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\">멀티 스레드의 단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/blog/about-multi-thread-env/#%EB%B3%B8%EB%A1%A0-%EC%8A%A4%ED%84%B0%EB%94%94-%EA%B3%B5%EC%9C%A0-%EB%82%B4%EC%9A%A9-\">본론 스터디 공유 내용 !</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/blog/about-multi-thread-env/#java%EC%9D%98-synchronized%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">Java의 ‘synchronized’를 사용하는 방법</a></li>\n<li><a href=\"/category/blog/about-multi-thread-env/#%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">옵저버 패턴을 사용하는 방법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/blog/about-multi-thread-env/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>","frontmatter":{"title":"멀티 스레드 환경의 자원 공유에 대하여","description":"멀티 스레드 환경에서 자원 공유","date":"2020.06.16","emoji":"🏘","category":"blog"}}},"pageContext":{"slug":"/category/blog/about-multi-thread-env/","relatedPosts":[{"node":{"fields":{"slug":"/category/blog/aws-eb-https/"},"frontmatter":{"title":"AWS EB에서 HTTPS 적용하기 + Route 53에 도메인 등록하기","date":"2020.08.23","emoji":"🔐","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/spring-jpa-n+1-query/"},"frontmatter":{"title":"Spring JPA(ORM)의 N+1 쿼리 문제 해결","date":"2020.06.29","emoji":"✅","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/performance-comparison-prisma-typeorm/"},"frontmatter":{"title":"Prisma와 TypeORM은 성능에 차이가 있을까?","date":"2020.06.11","emoji":"⁉️","category":"blog"}}},{"node":{"fields":{"slug":"/category/blog/getting-started-utterances/"},"frontmatter":{"title":"Gatsby 블로그 - utterances 소셜 댓글 기능 도입하기","date":"2020.06.07","emoji":"💬","category":"blog"}}}]}}}