{"componentChunkName":"component---src-templates-post-tsx","path":"/category/spring/toby-spring/template-callback/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"b8f507e3-5bb7-5dfc-8690-2aab28d099fb","excerpt":"개요 에는 자유롭게 열려있고 에는 굳게 닫혀 있다는 객체 지향 설계의 핵심 원칙인 (OCP…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p><code class=\"language-text\">확장</code>에는 자유롭게 열려있고 <code class=\"language-text\">변경</code>에는 굳게 닫혀 있다는 객체 지향 설계의 핵심 원칙인 <code class=\"language-text\">개방 폐쇄 원칙</code>(OCP) 을 생각해봅시다.<br>\n각각 다른 목적과 이유에 의해서 다른 시점에 독립적으로 변경될 수 있는 효율적인 구조를 만들어주는 것이 <code class=\"language-text\">개방 폐쇄 원칙</code>입니다.</p>\n<p><code class=\"language-text\">템플릿</code>이란 이렇게 바뀌는 성질 중에서도 <code class=\"language-text\">변경이 일어나지 않는 성질을 가진 부분</code>을 <code class=\"language-text\">자유롭게 변경되는 성질을 가진 부분</code>으로부터 분리시켜 효과적으로 재사용할 수 있도록 하는 방법입니다.</p>\n<h2 id=\"변하는-것과-변하지-않는-것\" style=\"position:relative;\"><a href=\"#%EB%B3%80%ED%95%98%EB%8A%94-%EA%B2%83%EA%B3%BC-%EB%B3%80%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83\" aria-label=\"변하는 것과 변하지 않는 것 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변하는 것과 변하지 않는 것</h2>\n<p>JDBC에서 <code class=\"language-text\">try/catch/finally</code> 예외 처리를 적용한 코드를 보면서 생각해봅시다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변하는 부분</span>\n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                c<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>코드를 보자마자 너무 막막합니다 😦<br>\n복잡한 <code class=\"language-text\">try/catch/finally</code> 블록이 2중으로 중첩까지되며 만드는 모든 메소드마다 코드가 반복될 것입니다.</p>\n<p><strong>이런 코드를 효과적으로 다룰 수 있는 방법은 없을까?</strong></p>\n<p>이 문제의 핵심은 많은 곳에서 <code class=\"language-text\">중복되고 변하지 않는 코드</code> 와 <code class=\"language-text\">자주 확장되고 변하는 코드</code>를 <code class=\"language-text\">분리</code>해내는 작업입니다.</p>\n<p>위의 코드에서 <code class=\"language-text\">변하지 않는 부분</code>과 <code class=\"language-text\">변하는 부분</code>을 분리할 수 있습니다.</p>\n<ol>\n<li>\n<p>변하지 않는 부분</p>\n<ul>\n<li>DB를 연결하고 쿼리를 실행시키고 리소스를 반환(close) 작업</li>\n</ul>\n</li>\n<li>\n<p>변하는 부분</p>\n<ul>\n<li>PrepareStatement를 생성하는 작업 + 쿼리문</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"작업의-분리\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85%EC%9D%98-%EB%B6%84%EB%A6%AC\" aria-label=\"작업의 분리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업의 분리</h4>\n<p>이렇게 구분지은 작업을 분리하는 방법은 보통 <code class=\"language-text\">3가지 방법</code>으로 접근할 수 있습니다.</p>\n<ol>\n<li>메소드 추출 방법</li>\n<li>템플릿 메소드 패턴의 적용</li>\n<li>전략 패턴의 적용</li>\n</ol>\n<p>첫번째, <code class=\"language-text\">메소드 추출 방법</code>은 중복이 많이 일어나는 변하지 않는 부분을 메소드로 추출해야하지만, 변하지 않는 부분이 변하는 부분을 감싸는 구조이기에 적용이 애매합니다.</p>\n<p>두번째, <code class=\"language-text\">템플릿 메소드 패턴 방법</code>은 상속을 통해 기능을 확장시키는 방법입니다.<br>\n하지만, 상속은 다중 상속이 불가능하고 DAO 로직마다 상속을 통해 새로운 클래스를 생성해야한다는 단점이 있습니다.</p>\n<p>세번째, <code class=\"language-text\">전략 패턴 방법</code>은 오브젝트를 아예 둘로 분리하고 인터페이스를 통해서만 의존하도록 만드는 방법입니다.</p>\n<h4 id=\"전략-패턴의-적용\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%81%EC%9A%A9\" aria-label=\"전략 패턴의 적용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴의 적용</h4>\n<p>여기서는 세번째 <code class=\"language-text\">전략 패턴 방법</code>을 적용해보려고 합니다.</p>\n<p>변하는 부분을 분리한 것을 전략 패턴에서 <code class=\"language-text\">전략</code>이라고 합니다.</p>\n<p>먼저, 이를 인터페이스로 분리하면</p>\n<p><strong>1. StatementStrategy 전략 인터페이스</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StatementStrategy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><strong>2. deleteAll() 메소드의 기능을 구현한 StatementStrategy 전략 클래스</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeleteAllStatement</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StatementStrategy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음으로 변하지 않는 부분을 분리합니다.<br>\n변하지 않는 부분을 분리한 것을 <code class=\"language-text\">컨텍스트</code>라고 합니다.</p>\n<p><strong>3. 중복되는 코드를 분리한 컨텍스트 코드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jdbcContextWithStatementStrategy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementStrategy</span> stmt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ps <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컨텍스트에서 전략 사용</span>\n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음으로 <code class=\"language-text\">클라이언트</code>에서 직접적으로 <code class=\"language-text\">전략을 생성, 선택</code>해 사용하는 메서드를 작성합니다.<br>\n전략을 생성하고 생성한 전략을 컨텍스트에 <code class=\"language-text\">DI</code> 해줍니다.</p>\n<p><strong>4. 클라이언트 책임을 담당할 deleteAll() 메소드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">StatementStrategy</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteAllStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">jdbcContextWithStatementStrategy</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이제 구조로 볼때는 완벽한 전략 패턴의 모습을 만들었습니다.</p>\n<h4 id=\"더-개선할-점\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EA%B0%9C%EC%84%A0%ED%95%A0-%EC%A0%90\" aria-label=\"더 개선할 점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 개선할 점</h4>\n<p>지금의 구조로는 <code class=\"language-text\">DAO</code> 메소드마다 새로운 <code class=\"language-text\">StatementStrategy</code> 구현 클래스를 만들어야 합니다.</p>\n<p>해결 방법은 <code class=\"language-text\">익명 클래스</code> or <code class=\"language-text\">람다</code>를 활용해 문제점을 해결할 수 있습니다.</p>\n<p><strong>람다를 활용한 예제</strong></p>\n<p>Java 8버전에서 제공되는 <code class=\"language-text\">람다</code>를 사용하려면 인터페이스는 하나의 추상 메소드를 가지는 인터페이스로 정의해야합니다.</p>\n<p>위와 같이 하나의 추상 메소드 가지는 인터페이스를 <code class=\"language-text\">함수형 인터페이스</code>라고 부릅니다.</p>\n<p>추가적으로 <code class=\"language-text\">@FunctionalInterface</code>라는 어노테이션이 있는데, 함수형 인터페이스를 명시적으로 컴파일러에게 알려 함수형 인터페이스의 조건을 위반하면 컴파일러는 예러를 발생시킵니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StatementStrategy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">jdbcContextWithStatementStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"템플릿과-콜백\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF%EA%B3%BC-%EC%BD%9C%EB%B0%B1\" aria-label=\"템플릿과 콜백 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿과 콜백</h2>\n<p>지금까지 만든 코드는 <code class=\"language-text\">전략 패턴</code>이 적용되었다고 말할 수 있습니다.<br>\n위의 코드들 처럼 복잡하지만 바뀌지 않는 일정한 패턴을 갖는 작업 흐름이 존재하고 그중 일부만 자주 바꿔서 사용해야하는 경우에 적합한 구조입니다.</p>\n<p>전략 패턴의 기본 구조에 익명 내부 클래스 , 람다를 활용한 방식을 스프링에서는 <code class=\"language-text\">템플릿/콜백</code> 패턴이라고 부릅니다.</p>\n<p>전략 패턴의 컨텍스트를 <code class=\"language-text\">템플릿</code>이라하고 익명 클래스, 람다로 만들어지는 오브젝트를 <code class=\"language-text\">콜백</code>이라고 부릅니다.</p>\n<h4 id=\"템플릿콜백의-동작-방식\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\" aria-label=\"템플릿콜백의 동작 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿/콜백의 동작 방식</h4>\n<p><code class=\"language-text\">클라이언트</code>의 역할은 템플릿 안에서 실행될 로직을 담은 콜백 오브젝트를 생성하고 콜백이 참조할 정보를 제공합니다.</p>\n<p><code class=\"language-text\">템플릿</code>은 내부에서 생성한 참조 정보를 가지고 콜백 오브젝트의 메소드를 호출합니다.<br>\n그 후, 콜백은 클라이언트의 정보와 메소드를 가지고 작업을 수행 한 뒤 다시 템플릿에게 결과를 반환합니다.</p>\n<p><code class=\"language-text\">템플릿</code>은 콜백이 반환한 정보를 가지고 작업을 마저 수행합니다.<br>\n경우에 따라 최종 결과를 클라이언트에게 반환합니다.</p>\n<h4 id=\"템플릿콜백의-응용\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF%EC%BD%9C%EB%B0%B1%EC%9D%98-%EC%9D%91%EC%9A%A9\" aria-label=\"템플릿콜백의 응용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿/콜백의 응용</h4>\n<p>스프링 개발자라면 <code class=\"language-text\">템플릿/콜백</code> 기능을 잘 사용하거나 필요한 곳이 있으면 직접 만들어 사용할 수 있어야 한다고 합니다.</p>\n<p>고정된 작업 흐름을 갖고 있으면서 여러 곳에서 자주 반복되는 코드가 있다면, 중복되는 코드를 분리할 방법을 생각해보는 습관을 가지면 좋습니다.</p>\n<p>먼저 <code class=\"language-text\">메소드로 분리</code>해보고 인터페이스를 사용하여 <code class=\"language-text\">전략 패턴</code>을 적용해 DI로 의존 관계를 관리하도록 만듭니다.<br>\n그런데, 여기서 바뀌는 부분이 한 어플리케이션 안에서 동시에 <code class=\"language-text\">여러 종류</code>로 만들어 질 수 있다면 이번엔 <code class=\"language-text\">템플릿/콜백</code> 패턴을 적용할 수 있습니다.</p>\n<p>다음 파일을 읽어 수를 더하거나 곱하는 예제를 보고 더 깊게 이해해봅시다 !</p>\n<p><strong>더하기 메소드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">calSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Integer</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">==</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 바뀌는 코드</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>곱하기 메소드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">calMultiply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Integer</span> multiply <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">==</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        multiply <span class=\"token operator\">*=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 바뀌는 코드</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> multiply<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>조금만 살펴봐도 두 코드가 아주 유사함을 알 수 있습니다.</p>\n<ol>\n<li>결과를 저장할 변수를 초기화</li>\n<li>BufferedReader를 이용해 파일을 한줄 한줄 읽습니다.</li>\n<li>변수에 계산한 결과를 저장합니다.</li>\n<li>파일을 다 읽었으면 결과를 리턴합니다.</li>\n</ol>\n<p>템플릿과 콜백을 찾아낼때는 변하는 코드의 경계를 찾고 그 경계를 사이에 두고 주고 받는 일정한 정보가 있는지 확인하면 됩니다.</p>\n<p>여기서 바뀌는 코드는 단 한줄입니다.</p>\n<p>바뀌는 코드(콜백)을 인터페이스로 정의합니다.</p>\n<p><strong>라인별 작업을 정의한 인터페이스</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LineCallback</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Integer</span> <span class=\"token function\">doSomethingWithLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>LineCallback을 사용하는 템플릿</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">lineReadTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filepath<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LineCallback</span> callback<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> initVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> res <span class=\"token operator\">=</span> initVal<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">==</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">doSomethingWithLine</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>템플릿을 사용하도록 수정한 calSum() 메서드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">calSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">LineCallback</span> sumCallback <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">lineReadTemplate</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> sumCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"제네릭스를-활용한-콜백-인터페이스\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%8A%A4%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BD%9C%EB%B0%B1-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"제네릭스를 활용한 콜백 인터페이스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭스를 활용한 콜백 인터페이스</h4>\n<p><code class=\"language-text\">제네릭</code>을 사용하면 좀 더 강력한 <code class=\"language-text\">템플릿/콜백</code> 구조를 만들 수 있습니다.</p>\n<p>위의 예제는 결과가 <code class=\"language-text\">Integer</code>로 고정되어 있지만 <code class=\"language-text\">제네릭</code>을 사용하면 다양한 오브젝트를 지원할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LineCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">T</span> <span class=\"token function\">doSomethingWithLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li>\n<p><a href=\"/category/spring/toby-spring/template-callback/#%EB%B3%80%ED%95%98%EB%8A%94-%EA%B2%83%EA%B3%BC-%EB%B3%80%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83\">변하는 것과 변하지 않는 것</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%EC%9E%91%EC%97%85%EC%9D%98-%EB%B6%84%EB%A6%AC\">작업의 분리</a></li>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A0%81%EC%9A%A9\">전략 패턴의 적용</a></li>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%EB%8D%94-%EA%B0%9C%EC%84%A0%ED%95%A0-%EC%A0%90\">더 개선할 점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/spring/toby-spring/template-callback/#%ED%85%9C%ED%94%8C%EB%A6%BF%EA%B3%BC-%EC%BD%9C%EB%B0%B1\">템플릿과 콜백</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%ED%85%9C%ED%94%8C%EB%A6%BF%EC%BD%9C%EB%B0%B1%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\">템플릿/콜백의 동작 방식</a></li>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%ED%85%9C%ED%94%8C%EB%A6%BF%EC%BD%9C%EB%B0%B1%EC%9D%98-%EC%9D%91%EC%9A%A9\">템플릿/콜백의 응용</a></li>\n<li><a href=\"/category/spring/toby-spring/template-callback/#%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%8A%A4%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BD%9C%EB%B0%B1-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">제네릭스를 활용한 콜백 인터페이스</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[토비의 스프링] 3. 전략 패턴과 템플릿/콜백에 대해서","description":"Java, Spring 템플릿/콜백 패턴에 대해서","date":"2020.06.23","emoji":"📃","category":"spring"}}},"pageContext":{"slug":"/category/spring/toby-spring/template-callback/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/transaction-property/"},"frontmatter":{"title":"[토비의 스프링] 6-3. AOP - 트랜잭션 속성","date":"2020.07.20","emoji":"🧩","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/basic-concept/"},"frontmatter":{"title":"[토비의 스프링] 6-2. AOP - 기본 용어","date":"2020.07.16","emoji":"📙","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/unit-test-and-proxy/"},"frontmatter":{"title":"[토비의 스프링] 6-1. AOP - 단위 테스트와 프록시","date":"2020.07.11","emoji":"ℹ️","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/service-abstraction/mockup-test/"},"frontmatter":{"title":"[토비의 스프링] 5-2. 단일 책임 원칙과 테스트 추상화","date":"2020.07.07","emoji":"⚠️","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/service-abstraction/transaction/"},"frontmatter":{"title":"[토비의 스프링] 5-1. 서비스 추상화와 트랜잭션","date":"2020.07.01","emoji":"🔮","category":"spring"}}}]}}}