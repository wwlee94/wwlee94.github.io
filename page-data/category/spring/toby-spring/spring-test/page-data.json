{"componentChunkName":"component---src-templates-post-tsx","path":"/category/spring/toby-spring/spring-test/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"97f87e01-620c-5321-b635-082d7895b4e8","excerpt":"개요 스프링이 개발자에게 제공하는 가장 중요한 가치 2가지는 과 입니다. 애플리케이션은 계속 변화하며 복잡해집니다. 그 변화에 대응하는 이 확장과 변환를 고려한 ‘객체지향적 설계’와 ‘IoC/DI…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>스프링이 개발자에게 제공하는 가장 중요한 가치 2가지는 <code class=\"language-text\">객체지향</code>과 <code class=\"language-text\">테스트</code>입니다.</p>\n<p>애플리케이션은 계속 변화하며 복잡해집니다.<br>\n그 변화에 대응하는 <code class=\"language-text\">첫번째 전략</code>이 확장과 변환를 고려한 ‘객체지향적 설계’와 ‘IoC/DI’ 같은 기술입니다.<br>\n<code class=\"language-text\">두번째 전략</code>은 변화에 유연하게 대처할 수 있는 것이 ‘테스트 기술’입니다.</p>\n<h2 id=\"올바른-테스트를-만들려면-\" style=\"position:relative;\"><a href=\"#%EC%98%AC%EB%B0%94%EB%A5%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%A0%A4%EB%A9%B4-\" aria-label=\"올바른 테스트를 만들려면  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>올바른 테스트를 만들려면 ?</h2>\n<h4 id=\"1-작은-단위의-테스트\" style=\"position:relative;\"><a href=\"#1-%EC%9E%91%EC%9D%80-%EB%8B%A8%EC%9C%84%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"1 작은 단위의 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 작은 단위의 테스트</h4>\n<p><code class=\"language-text\">테스트</code>란 개발자가 의도했던 대로 코드가 <code class=\"language-text\">정확히 동작하는지</code> 확인하는 작업입니다.</p>\n<p>테스트는 대상이 명확하다면 그 대상에만 집중해서 테스트를 하는 것이 바람직합니다.<br>\n따라서 테스트는 가능하면 작은 단위로 쪼개서 집중해야합니다.</p>\n<blockquote>\n<p>관심사의 분리라는 원리가 테스트에도 적용 !</p>\n</blockquote>\n<p>이렇게 작은 단위의 코드에 대해 테스트를 수행한 것을 <code class=\"language-text\">단위 테스트</code>(Unit test)라고 합니다.<br>\n단위 테스트를 하는 이유는 <code class=\"language-text\">의도한 대로 동작하는지</code>를 개발자 스스로 빨리 확인받기 위해서입니다.</p>\n<h4 id=\"2-자동-수행-테스트-코드\" style=\"position:relative;\"><a href=\"#2-%EC%9E%90%EB%8F%99-%EC%88%98%ED%96%89-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"2 자동 수행 테스트 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 자동 수행 테스트 코드</h4>\n<p>테스트는 자동으로 수행되도록 코드로 만들어지는 것이 중요합니다.<br>\n자동으로 수행되면 <code class=\"language-text\">테스트를 빠르게 실행</code>할 수 있기 때문에 <code class=\"language-text\">자주 반복해서 테스트</code>할 수 있습니다.</p>\n<h4 id=\"3-지속적-개선과-점진적-개발을-위한-테스트\" style=\"position:relative;\"><a href=\"#3-%EC%A7%80%EC%86%8D%EC%A0%81-%EA%B0%9C%EC%84%A0%EA%B3%BC-%EC%A0%90%EC%A7%84%EC%A0%81-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"3 지속적 개선과 점진적 개발을 위한 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 지속적 개선과 점진적 개발을 위한 테스트</h4>\n<p>테스트는 이용하면 새로운 기능이 기대한 대로 동작하는지 확인할 수 있습니다.<br>\n또한, 새로운 기능을 추가할 때 <code class=\"language-text\">기존 코드에 영향</code>을 받지 않고 잘 동작하는지를 확인할 수 있습니다.</p>\n<h4 id=\"4-실행-결과-확인-자동화\" style=\"position:relative;\"><a href=\"#4-%EC%8B%A4%ED%96%89-%EA%B2%B0%EA%B3%BC-%ED%99%95%EC%9D%B8-%EC%9E%90%EB%8F%99%ED%99%94\" aria-label=\"4 실행 결과 확인 자동화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 실행 결과 확인 자동화</h4>\n<p>테스트 결과를 개발자가 직접 확인하지 않아도 <code class=\"language-text\">테스트의 성공, 실패</code>에 대한 <code class=\"language-text\">결과를 자동화</code>해야합니다.</p>\n<h2 id=\"테스트-주도-개발-tdd\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C-tdd\" aria-label=\"테스트 주도 개발 tdd permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 주도 개발 (TDD)</h2>\n<p>테스트 코드를 먼저 만들고, 테스트를 성공하게 해주는 코드를 작성하는 방식의 개발을 <code class=\"language-text\">테스트 주도 개발</code>이라고 합니다.</p>\n<p>TDD는 테스트를 먼저 만들고 그 <code class=\"language-text\">테스트가 성공하도록 하는 코드</code>를 만들기 때문에 테스트를 빼먹지 않고 꼼꼼하게 만들어낼 수 있습니다.<br>\n또, 매번 테스트가 성공하는 것을 보면서 <code class=\"language-text\">작성한 코드에 확신</code>을 가질 수 있습니다.</p>\n<p>‘테스트를 만들고 자주 실행하면 개발이 지연되지 않을까?’ 라는 고민을 할 수도 있습니다.<br>\n하지만, 테스트 작성 시간이 짧기도하고 테스트 덕분에 오류를 빨리 잡아낼 수 있어서 <code class=\"language-text\">전체적인 개발 속도</code>는 오히려 빨라집니다.</p>\n<h2 id=\"junit\" style=\"position:relative;\"><a href=\"#junit\" aria-label=\"junit permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JUnit</h2>\n<p><code class=\"language-text\">JUnit</code>은 자바에서 단위 테스트를 지원하는 테스트 프레임워크입니다.</p>\n<h4 id=\"junit-테스트의-조건\" style=\"position:relative;\"><a href=\"#junit-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A1%B0%EA%B1%B4\" aria-label=\"junit 테스트의 조건 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JUnit 테스트의 조건</h4>\n<p><code class=\"language-text\">JUnit</code> 프레임워크로 테스트를 진행하기 위해서 2가지 조건을 따라야합니다.</p>\n<ol>\n<li>메소드가 <code class=\"language-text\">public</code>으로 선언되어야합니다.</li>\n<li>메소드에 <code class=\"language-text\">@Test</code>라는 애노테이션을 붙여야합니다.</li>\n</ol>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">andAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">GenericXmlApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">UserDao</span> dao <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">JUnit</code>에는 다음처럼 <code class=\"language-text\">assertThat()</code> 스태틱 메서드로 값을 검증할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스프링\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>이런 메서드는 <code class=\"language-text\">매처(matcher)</code>라고 불리는 조건으로 비교해서 일치하면 다음으로 넘어가고, 아니면 테스트가 실패하도록 만들어줍니다.</p>\n<p>마지막으로 테스트는 항상 <code class=\"language-text\">동일한 결과를 보장</code>하도록 구현해야합니다.</p>\n<h4 id=\"junit의-부가-작업\" style=\"position:relative;\"><a href=\"#junit%EC%9D%98-%EB%B6%80%EA%B0%80-%EC%9E%91%EC%97%85\" aria-label=\"junit의 부가 작업 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JUnit의 부가 작업</h4>\n<p><strong>1. @Before</strong></p>\n<p><code class=\"language-text\">@Before</code>는 <code class=\"language-text\">테스트를 실행 전</code> 반복되는 로직을 처리하는 애노테이션입니다.</p>\n<p><code class=\"language-text\">@Test</code> 메소드가 실행되기 전에 먼저 실행되어야 하는 메서드를 정의한 예제</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">AplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dao <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>각 테스트 메소드에 반복적으로 나타났던 <code class=\"language-text\">중복된 사전 작업을 제거</code>하고 별도의 메서드로 작성할 수 있습니다.</p>\n<p><strong>2. @After</strong></p>\n<p><code class=\"language-text\">@After</code>는 <code class=\"language-text\">테스트 실행 이후</code> 반복되는 로직을 처리하는 애노테이션입니다.</p>\n<h4 id=\"junit-동작-방식\" style=\"position:relative;\"><a href=\"#junit-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\" aria-label=\"junit 동작 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JUnit 동작 방식</h4>\n<p><code class=\"language-text\">JUnit</code>이 하나의 테스트 클래스를 가져와 테스트를 수행하는 방식은 다음과 같습니다.</p>\n<ol>\n<li>테스트 클래스에서 <code class=\"language-text\">@Test</code>가 붙은 <code class=\"language-text\">public</code>이고 <code class=\"language-text\">void</code>형이며 파라미터가 없는 테스트 메소드를 모두 찾음</li>\n<li>테스트 클래스의 오브젝트를 하나 만듬</li>\n<li><code class=\"language-text\">@Before</code>가 붙은 메소드가 있으면 실행</li>\n<li><code class=\"language-text\">@Test</code>가 붙은 메소드를 하나 호출하고 테스트 결과를 저장</li>\n<li><code class=\"language-text\">@After</code>가 붙은 메소드가 있으면 실행</li>\n<li>나머지 테스트 메소드에 대해 2~5번을 반복</li>\n<li>모든 테스트의 결과를 종합해서 <code class=\"language-text\">Return</code></li>\n</ol>\n<h4 id=\"주의할-점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"주의할 점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할 점</h4>\n<ol>\n<li><code class=\"language-text\">@Before</code> 나 <code class=\"language-text\">@After</code> 메소드를 테스트 메소드에서 직접 호출하지 않기 때문에 서로 주고 받을 정보는 <code class=\"language-text\">인스턴스 변수</code>에 담아 사용해야합니다.</li>\n<li>\n<p>각 테스트 메소드를 실행할 때마다 <code class=\"language-text\">테스트 클래스의 오브젝트를 새로</code> 만듭니다.<br>\n한번 만들어진 테스트 클래스의 오브젝트는 하나의 테스트 메소드를 사용하고 나면 버려집니다.<br>\n덕분에, 인스턴스 변수도 부담 없이 사용 가능합니다.</p>\n<blockquote>\n<p>각 테스트가 서로 독립적으로 동작하도록 하기 위함 !</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"픽스처-fixture\" style=\"position:relative;\"><a href=\"#%ED%94%BD%EC%8A%A4%EC%B2%98-fixture\" aria-label=\"픽스처 fixture permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>픽스처 (Fixture)</h4>\n<p>테스트를 수행하는 데 필요한 정보나 오브젝트를 <code class=\"language-text\">픽스처(Fixture)</code>라고 합니다.</p>\n<p>여러 테스트에서 반복적으로 사용되는 오브젝트는 다음과 같이 <code class=\"language-text\">@Before</code> 메소드를 이용해 생성해두면 편리합니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> dao<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user2<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Before</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"springno1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"springno2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"테스트를-위한-애플리케이션-컨텍스트-관리\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A6%AC\" aria-label=\"테스트를 위한 애플리케이션 컨텍스트 관리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트를 위한 애플리케이션 컨텍스트 관리</h2>\n<p><code class=\"language-text\">@Before</code> 메소드가 테스트 메소드 개수만큼 반복되기 때문에 애플리케이션도 여러번 생성됩니다.</p>\n<p>테스트는 가능한 독립적으로 <code class=\"language-text\">매번 새로운 오브젝트를 생성</code>해 사용하는 것이 원칙입니다.</p>\n<p>하지만, 애플리케이션 컨텍스트처럼 생성에 <code class=\"language-text\">많은 시간과 자원이 소모</code>되는 경우에는 테스트 전체가 공유하는 오브젝트를 만들기도 합니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// @ExtendWith(SpringExtension.class) // JUnit5 버전</span>\n<span class=\"token comment\">// @SpringBootTest(classes = SpringStudy.class)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Junit4 버전</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations<span class=\"token operator\">=</span><span class=\"token string\">\"/applicationContext.xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// XML 버전</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> context<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">@RunWith</code> : JUnit 프레임워크의 테스트 실행 방법을 확장할 때 사용하는 애노테이션입니다.<br>\n<code class=\"language-text\">@ContextConfiguration</code> : 자동으로 만들어준 애플리케이션 컨텍스트의 설정파일 위치를 지정해줍니다.<br>\n<code class=\"language-text\">@Autowired</code> : 스프링의 <code class=\"language-text\">DI</code>에 사용되는 특별한 애노테이션입니다.</p>\n<h2 id=\"autowired-작동-원리\" style=\"position:relative;\"><a href=\"#autowired-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC\" aria-label=\"autowired 작동 원리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Autowired 작동 원리</h2>\n<ol>\n<li><code class=\"language-text\">@Autowired</code>가 붙은 인스턴스 변수가 있으면, 테스트 컨텍스트 프레임워크는 변수타입과 일치하는 컨텍스트 내 빈을 찾습니다.</li>\n<li>타입이 일치하는 빈이 있으면 인스턴스 변수에 주입해줍니다.</li>\n</ol>\n<blockquote>\n<p>일반적으로 주입을 위해 생성자 or 수정자 메소드를 사용하지만 이 경우에는 메소드가 없어도 주입이 가능</p>\n</blockquote>\n<p>스프링 어플리케이션 컨텍스트는 초기화할 때 <code class=\"language-text\">자기 자신도 빈으로 등록</code>합니다.<br>\n따라서, 애플리케이션 컨텍스트에는 <code class=\"language-text\">ApplicationContext</code> 타입의 빈이 존재하는 셈이고 <code class=\"language-text\">DI</code>도 가능합니다.</p>\n<p>만약 같은 타입이 2개 이상 있는 경우에는 타입만으로 어떤 빈을 가져올지 결정할 수 없어서 문제가 될 수 있습니다.</p>\n<blockquote>\n<p>타입이 중복되면 변수도 확인, 변수도 중복되면 예외 발생 !</p>\n</blockquote>\n<h2 id=\"di와-테스트\" style=\"position:relative;\"><a href=\"#di%EC%99%80-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"di와 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI와 테스트</h2>\n<h4 id=\"테스트를-위한-별도의-di-설정\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B3%84%EB%8F%84%EC%9D%98-di-%EC%84%A4%EC%A0%95\" aria-label=\"테스트를 위한 별도의 di 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트를 위한 별도의 DI 설정</h4>\n<p>DAO가 테스트에서만 다른 DataSource를 사용하도록 할 수 있는 방법이 있을까?</p>\n<p>이러한 경우 테스트 전용 설정파일을 <code class=\"language-text\">따로 만들어두는 방법</code>을 사용하면 됩니다.</p>\n<p>예를 들어, 하나는 <code class=\"language-text\">서버 운영용</code> DataSource, 다른 하나는 <code class=\"language-text\">테스트용</code> DataSource를 작성해 테스트에서는 항상 테스트용 DataSource 설정 파일을 사용하도록 하면 됩니다.</p>\n<h4 id=\"컨테이너-없는-di-테스트\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%97%86%EB%8A%94-di-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"컨테이너 없는 di 테스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 없는 DI 테스트</h4>\n<p>다른 하나로는 아예 스프링 컨테이너를 사용하지 않고 테스트를 만드는 방식이 있습니다.</p>\n<p>테스트 클래스 내에서 객체의 <code class=\"language-text\">생성 및 관계 설정</code>을 <code class=\"language-text\">모두 직접 정의</code>해줍니다.</p>\n<p>이러한 방식의 <code class=\"language-text\">장점</code>으로는 애플리케이션 컨텍스트를 아예 사용하지 않으니 코드는 더 단순해지고 이해하기 편해집니다.<br>\n또한, 애플리케이션 컨텍스트가 만들어지는 번거로움이 없어져 테스트 시간도 절약할 수 있습니다.</p>\n<p>반면에, 매번 새로운 테스트 오브젝트가 생성된다는 <code class=\"language-text\">단점</code>도 있습니다.</p>","tableOfContents":"<ul>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li>\n<p><a href=\"/category/spring/toby-spring/spring-test/#%EC%98%AC%EB%B0%94%EB%A5%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EB%A0%A4%EB%A9%B4-\">올바른 테스트를 만들려면 ?</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/spring-test/#1-%EC%9E%91%EC%9D%80-%EB%8B%A8%EC%9C%84%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\">1. 작은 단위의 테스트</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#2-%EC%9E%90%EB%8F%99-%EC%88%98%ED%96%89-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\">2. 자동 수행 테스트 코드</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#3-%EC%A7%80%EC%86%8D%EC%A0%81-%EA%B0%9C%EC%84%A0%EA%B3%BC-%EC%A0%90%EC%A7%84%EC%A0%81-%EA%B0%9C%EB%B0%9C%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\">3. 지속적 개선과 점진적 개발을 위한 테스트</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#4-%EC%8B%A4%ED%96%89-%EA%B2%B0%EA%B3%BC-%ED%99%95%EC%9D%B8-%EC%9E%90%EB%8F%99%ED%99%94\">4. 실행 결과 확인 자동화</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C-tdd\">테스트 주도 개발 (TDD)</a></li>\n<li>\n<p><a href=\"/category/spring/toby-spring/spring-test/#junit\">JUnit</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/spring-test/#junit-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A1%B0%EA%B1%B4\">JUnit 테스트의 조건</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#junit%EC%9D%98-%EB%B6%80%EA%B0%80-%EC%9E%91%EC%97%85\">JUnit의 부가 작업</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#junit-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\">JUnit 동작 방식</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">주의할 점</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%ED%94%BD%EC%8A%A4%EC%B2%98-fixture\">픽스처 (Fixture)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A6%AC\">테스트를 위한 애플리케이션 컨텍스트 관리</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#autowired-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC\">@Autowired 작동 원리</a></li>\n<li>\n<p><a href=\"/category/spring/toby-spring/spring-test/#di%EC%99%80-%ED%85%8C%EC%8A%A4%ED%8A%B8\">DI와 테스트</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B3%84%EB%8F%84%EC%9D%98-di-%EC%84%A4%EC%A0%95\">테스트를 위한 별도의 DI 설정</a></li>\n<li><a href=\"/category/spring/toby-spring/spring-test/#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%97%86%EB%8A%94-di-%ED%85%8C%EC%8A%A4%ED%8A%B8\">컨테이너 없는 DI 테스트</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[토비의 스프링] 2. 테스트에 대해서","description":"Java, Spring 테스트에 대해서","date":"2020.06.19","emoji":"⚙️","category":"spring"}}},"pageContext":{"slug":"/category/spring/toby-spring/spring-test/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/toby-spring/service-abstraction/"},"frontmatter":{"title":"[토비의 스프링] 5. 서비스 추상화와 트랜잭션","date":"2020.07.01","emoji":"🔮","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/spring-exception/"},"frontmatter":{"title":"[토비의 스프링] 4. 스프링 예외 처리","date":"2020.06.27","emoji":"🛠","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/template-callback/"},"frontmatter":{"title":"[토비의 스프링] 3. 전략 패턴과 템플릿/콜백에 대해서","date":"2020.06.23","emoji":"📃","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/object-dependency/dependency-injection/"},"frontmatter":{"title":"[토비의 스프링] 1. 오브젝트와 의존관계 - 의존관계 주입(DI)","date":"2020.06.13","emoji":"📥","category":"spring"}}}]}}}