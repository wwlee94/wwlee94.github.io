{"componentChunkName":"component---src-templates-post-tsx","path":"/category/spring/toby-spring/aop/basic-concept/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"1cc26051-dc78-5ca9-82ca-2958116eb70a","excerpt":"개요 의 기본 용어와 ’란 무엇인지?‘에 대해 조금 더 자세히 알아보고 스프링의 에 대해 알아보겠습니다. AOP의 기본 용어 에서 많이 사용되는 몇 가지 용어를 먼저 살펴보고 갑시다. 타깃(Target…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p><code class=\"language-text\">AOP</code>의 기본 용어와 ’<code class=\"language-text\">AOP</code>란 무엇인지?‘에 대해 조금 더 자세히 알아보고 스프링의 <code class=\"language-text\">트랜잭션 속성</code>에 대해 알아보겠습니다.</p>\n<h2 id=\"aop의-기본-용어\" style=\"position:relative;\"><a href=\"#aop%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9A%A9%EC%96%B4\" aria-label=\"aop의 기본 용어 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP의 기본 용어</h2>\n<p><code class=\"language-text\">AOP</code>에서 많이 사용되는 몇 가지 용어를 먼저 살펴보고 갑시다.</p>\n<h4 id=\"타깃target\" style=\"position:relative;\"><a href=\"#%ED%83%80%EA%B9%83target\" aria-label=\"타깃target permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타깃(Target)</h4>\n<p><code class=\"language-text\">타깃</code>은 부가기능을 부여할 대상입니다.<br>\n<code class=\"language-text\">핵심기능</code>을 담은 클래스일수도, <code class=\"language-text\">부가기능</code>을 제공하는 프록시 오브젝트일 수도 있습니다.</p>\n<h4 id=\"어드바이스advice\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%93%9C%EB%B0%94%EC%9D%B4%EC%8A%A4advice\" aria-label=\"어드바이스advice permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어드바이스(Advice)</h4>\n<p><code class=\"language-text\">어드바이스</code>는 타깃에게 제공할 <code class=\"language-text\">부가기능</code>을 담은 모듈입니다.<br>\n<code class=\"language-text\">어드바이스</code>는 오브젝트로 정의하기도 하지만 메소드 레벨에서 정의할 수도 있습니다.</p>\n<h4 id=\"조인-포인트join-point\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EC%9D%B8-%ED%8F%AC%EC%9D%B8%ED%8A%B8join-point\" aria-label=\"조인 포인트join point permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조인 포인트(Join Point)</h4>\n<p><code class=\"language-text\">조인 포인트</code>란 어드바이스가 적용될 수 있는 위치를 말합니다.<br>\n타깃 오브젝트가 구현한 모든 인터페이스의 모든 메소드는 <code class=\"language-text\">조인 포인트</code>가 됩니다.</p>\n<h4 id=\"포인트컷pointcut\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7pointcut\" aria-label=\"포인트컷pointcut permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인트컷(Pointcut)</h4>\n<p><code class=\"language-text\">포인트컷</code>이란 어드바이스를 적용할 조인 포인트를 선별하는 작업입니다.<br>\n클래스를 선정하고 그 안의 메소드를 선정하는 기능을 가집니다.</p>\n<h4 id=\"프록시proxy\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9Cproxy\" aria-label=\"프록시proxy permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시(Proxy)</h4>\n<p><code class=\"language-text\">프록시</code>는 클라이언트와 타깃 사이에 투명하게 존재하면서 부가기능을 제공하는 오브젝트입니다.<br>\n클라이언트의 메소드 호출을 대신 받아 부가기능을 제공한 뒤 타깃에 위임해줍니다.</p>\n<h4 id=\"어드바이저advisor\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%93%9C%EB%B0%94%EC%9D%B4%EC%A0%80advisor\" aria-label=\"어드바이저advisor permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어드바이저(Advisor)</h4>\n<p><code class=\"language-text\">어드바이저</code>는 <code class=\"language-text\">포인트컷</code>과 <code class=\"language-text\">어드바이스</code>를 하나씩 가지고 있는 오브젝트입니다.</p>\n<blockquote>\n<p>어드바이저 = 포인트컷 + 어드바이스</p>\n</blockquote>\n<h4 id=\"애스펙트aspect\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EC%8A%A4%ED%8E%99%ED%8A%B8aspect\" aria-label=\"애스펙트aspect permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애스펙트(Aspect)</h4>\n<p><code class=\"language-text\">OOP</code>의 클래스와 마찬가지로 <code class=\"language-text\">애스펙트</code>는 AOP의 기본 모듈입니다.<br>\n한 개 또는 그 이상 어드바이저로 만들어지며 보통 싱글톤 형태의 오브젝트로 존재합니다.</p>\n<h2 id=\"포인트컷-표현식을-이용한-포인트컷\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7\" aria-label=\"포인트컷 표현식을 이용한 포인트컷 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인트컷 표현식을 이용한 포인트컷</h2>\n<p>기존의 <code class=\"language-text\">리플렉션 API</code>를 통해 클래스와 메소드 이름, 패키지, 파라미터, 리턴 값을 물론 인터페이스, 상속한 클래스까지 알 수 있는 API를 이용하여 클래스나 메소드를 선정했습니다.<br>\n하지만, 리플렉션 API를 이용해 메타조건을 비교하는 방법은 조건이 달라질 때마다 포인트컷 구현 코드를 수정해야하는 <code class=\"language-text\">번거로움</code>이 있습니다.</p>\n<p>스프링은 아주 간단하고 효과적인 방법으로 포인트컷의 클래스와 메소드를 선정하는 알고리즘을 작성할 수 있는 방법을 제공합니다.<br>\n이것을 <code class=\"language-text\">포인트컷 표현식</code>이라고 부릅니다.</p>\n<h4 id=\"포인트컷-표현식\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"포인트컷 표현식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인트컷 표현식</h4>\n<ul>\n<li>포인트컷 표현식을 지원하는 포인트컷을 적용하려면 <code class=\"language-text\">AspectJExpressionPointcut</code> 클래스를 사용하면 됩니다.</li>\n<li><code class=\"language-text\">AspectJExpressionPointcut은</code> 클래스와 메소드의 선정 알고리즘을 포인트컷 표현식을 이용해 한 번에 지정할 수 있게 해줍니다.</li>\n<li>스프링이 사용하는 포인트컷 표현식은 <code class=\"language-text\">AspectJ</code>라는 유명한 프레임워크에서 제공하는 것을 가져와 일부 문법을 확장해서 사용하는 것이고 그래서 이를 <code class=\"language-text\">AspectJ 포인트컷 표현식</code>이라고도 합니다.</li>\n</ul>\n<p>학습 테스트를 작성해서 표현식의 사용법을 알아봅시다.</p>\n<p><strong>포인트컷 테스트용 클래스</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Target</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TargetInterface</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>포인트컷 테스트용 추가 클래스</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"포인트컷-표현식-문법\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%ED%91%9C%ED%98%84%EC%8B%9D-%EB%AC%B8%EB%B2%95\" aria-label=\"포인트컷 표현식 문법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포인트컷 표현식 문법</h4>\n<p>AspectJ 포인트컷 표현식은 <code class=\"language-text\">포인트컷 지시자</code>를 이용해 작성합니다.<br>\n<code class=\"language-text\">execution()</code> 지시자를 사용한 포인트컷 표현식의 <code class=\"language-text\">문법구조</code>는 기본적으로 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>접근제한자 패턴<span class=\"token punctuation\">]</span> 타입패턴 <span class=\"token punctuation\">[</span>타입패턴<span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>이름패턴 <span class=\"token punctuation\">(</span>타입패턴 <span class=\"token operator\">|</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">throws</span> 예외 패턴<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>[]는 생략 가능하고 ()는 파라미터 패턴입니다.</li>\n<li>| 는 <code class=\"language-text\">OR</code> 조건입니다.</li>\n</ul>\n<p>메소드의 풀 시그니처를 문자열로 비교하는 개념이라고 생각하면 이해하기 쉽습니다.</p>\n<p><strong>예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> springbook<span class=\"token punctuation\">.</span>learning<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>pointcut<span class=\"token punctuation\">.</span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span><span class=\"token class-name\">RuntimeException</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>public</strong></p>\n<ul>\n<li>접근제한자입니다.<br>\npublic, protected, private 등이 올 수 있습니다.<br>\n생략이 가능합니다.</li>\n</ul>\n<p><strong>int</strong></p>\n<ul>\n<li>리턴값을 나타내는 패턴입니다.<br>\n생략은 불가능합니다.</li>\n</ul>\n<p><strong>springbook.learning.spring.pointcut.Target</strong></p>\n<ul>\n<li>패키지와 타입 이름을 포함한 클래스의 타입 패턴입니다.<br>\n생략이 가능합니다.</li>\n</ul>\n<p><strong>minus</strong></p>\n<ul>\n<li>메소드 이름 패턴입니다.<br>\n필수항목이기 때문에 반드시 적어야 합니다.<br>\n모든 메소드를 선택하겠다면 *(와일드카드)를 작성합니다.</li>\n</ul>\n<p><strong>(int, int)</strong></p>\n<ul>\n<li>메소드 파라미터의 타입 패턴입니다.</li>\n</ul>\n<p><strong>throws java.lang.RuntimeException</strong></p>\n<ul>\n<li>예외 이름에 대한 타입 패턴입니다.</li>\n</ul>\n<h4 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h4>\n<p>포인트컷 표현식은 다음과 같은 헬퍼 메소드를 만들어 사용하면 좋습니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> expression<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span> expected<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">AspectJExpressionPointcut</span> pointcut <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AspectJExpressionPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pointcut<span class=\"token punctuation\">.</span><span class=\"token function\">setExpression</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>pointcut<span class=\"token punctuation\">.</span><span class=\"token function\">getClassFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;&amp;</span> pointcut<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>사용 예제</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">targetClassPointcutMatches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> expression<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> expected<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plus\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pointcutMatches</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">targetClassPointcutMatches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"excution(* *(..))\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"aop란-무엇일까\" style=\"position:relative;\"><a href=\"#aop%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"aop란 무엇일까 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP란 무엇일까?</h2>\n<h4 id=\"트랜잭션-서비스-추상화\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"트랜잭션 서비스 추상화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트랜잭션 서비스 추상화</h4>\n<p>트랜잭션 경계설정 코드를 비즈니스 로직을 담은 코드에 넣으면서 맞닥뜨린 <code class=\"language-text\">첫 번째 문제</code>는 특정 트랜잭션 기술에 <code class=\"language-text\">종속되는 코드</code>가 돼버린다는 것입니다.<br>\n그래서 트랜잭션 적용이라는 추상적인 작업 내용은 유치한 채로 구체적인 구현 방법을 자유롭게 바꿀수 있도록 <code class=\"language-text\">서비스 추상화 기법</code>을 적용했다.<br>\n덕분에, 비즈니스 로직 코드는 트랜잭션을 어떻게 처리해야 한다는 구체적인 방법과 서버환경에서 종속되지 않습니다.<br>\n결국 <code class=\"language-text\">트랜잭션 추상화</code>란 인터페이스와 DI를 통해 <code class=\"language-text\">무엇을 하는지</code>는 남기고, 그것을 <code class=\"language-text\">어떻게 하는지</code>를 분리한 것입니다.</p>\n<h4 id=\"프록시와-데코레이터-패턴\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C%EC%99%80-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4\" aria-label=\"프록시와 데코레이터 패턴 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시와 데코레이터 패턴</h4>\n<p>트랜잭션을 어떻게 다룰 것인가는 추상화를 통해 코드에서 제거했지만, 여전히 대부분의 비즈니스 로직에는 트랜잭션이 들어가있습니다.<br>\n단순한 추상화와 메소드화로는 두가지를 분리할 수 없습니다.<br>\n그래서 도입한 것이 바로 <code class=\"language-text\">DI</code>를 이용해 <code class=\"language-text\">데코레이터 패턴</code>을 적용하는 방법이였습니다.<br>\n투명한 부가기능 부여를 가능하게하는 <code class=\"language-text\">데코레이터 패턴</code>의 적용 덕분에 비즈니스 로직을 담당하는 클래스도 자신을 사용하는 클라이언트와 DI 관계 맺을 이유를 찾게 됐습니다.</p>\n<h4 id=\"다이내믹-프록시와-프록시-팩토리-빈\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%B4%EB%82%B4%EB%AF%B9-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%B9%88\" aria-label=\"다이내믹 프록시와 프록시 팩토리 빈 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다이내믹 프록시와 프록시 팩토리 빈</h4>\n<p><code class=\"language-text\">프록시</code>를 이용해서 비즈니스 로직에서 트랜잭션 코드는 모두 제거할 수 있었지만, 비즈니스 로직 인터페이스의 모든 메소드마다 트랜잭션 기능을 부여하는 코드를 넣어 프록시 클래스를 만드는 작업이 오히려 큰 짐이 됐습니다.<br>\n트랜잭션이 필요 없는 메소드 조차 프록시로서 위임 기능이 필요하기 때문에 일일히 다 구현해주어야 했습니다.<br>\n그래서 프록시 클래스 없이도 프록시 오브젝트를 런타임 시에 만들어주는 <code class=\"language-text\">JDK 다이내믹 프록시</code> 기술을 적용해서 일부 해결했지만, 동일한 기능의 프록시를 여러 오브젝트에 적용할 경우 오브젝트 단위의 중복을 해결할 수 없었습니다.</p>\n<p>이런 문제점은 스프링의 <code class=\"language-text\">프록시 팩토리 빈</code>을 이용해 다이내믹 프록시 생성 방법에 DI를 도입해, 내부적으로 <code class=\"language-text\">템플릿/콜백 패턴</code>을 활용해 부가 기능을 담은 어드바이스와 부가기능 선정 알고리즘을 담은 포인트컷을 프록시에서 분리시키고 <code class=\"language-text\">여러 프록시에서 공유</code>해서 사용할 수 있게 되었습니다.</p>\n<h4 id=\"부가기능의-모듈화\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EA%B0%80%EA%B8%B0%EB%8A%A5%EC%9D%98-%EB%AA%A8%EB%93%88%ED%99%94\" aria-label=\"부가기능의 모듈화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부가기능의 모듈화</h4>\n<p>관심사가 같은 코드를 분리해 한데 모으는 것은 소프트웨어 개발의 가장 기본이 되는 원칙입니다.<br>\n<code class=\"language-text\">인터페이스</code>를 통한 <code class=\"language-text\">DI</code> 기법을 사용하면 낮은 결합도로 인해 대부분의 문제를 해결 할 수 있었습니다.<br>\n하지만, 이 트랜잭션 적용 코드는 기존에 써왔던 방법으로는 간단하게 분리해서 <code class=\"language-text\">독립된 모듈</code>로 만들 수 없었습니다.</p>\n<p><code class=\"language-text\">트랜잭션</code> 같은 부가기능은 핵심기능과 같은 방식으로는 모듈화하기가 매우 힘듭니다.<br>\n트랜잭션 부가기능이란 트랜잭션 기능을 추가해 줄 다른 대상, 즉 타깃이 존재해야만 의미가 있고, 따라서 각 기능을 부가할 대상인 각 타깃의 코드 안에 침투하거나 긴밀하게 연결되어 있지 않으면 안 됩니다.</p>\n<h4 id=\"aop-애스펙트-지향-프로그래밍\" style=\"position:relative;\"><a href=\"#aop-%EC%95%A0%EC%8A%A4%ED%8E%99%ED%8A%B8-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"aop 애스펙트 지향 프로그래밍 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP: 애스펙트 지향 프로그래밍</h4>\n<p>부가 기능 모듈화 작업을 연구하는 사람들은 기존의 <code class=\"language-text\">객체지향 설계 패러다임</code>과는 구분되는 <code class=\"language-text\">새로운 특성</code>이 있다고 생각했습니다.<br>\n이런 부가기능 모듈을 <code class=\"language-text\">애스펙트(aspect)</code>라고 부릅니다.<br>\n핵심 기능을 담고 있지는 않지만, 애플리케이션을 구성하는 중요한 요소이고, 핵심 기능에 부가되어 의미를 갖는 특별한 모듈을 가리킵니다.</p>\n<p>이러한 부가 기능들은 런타임 시에는 자기가 필요한 위치에 <code class=\"language-text\">다이내믹하게 참여</code>하게 될 것이고 이렇게 애플리케이션의 핵심적인 기능에서 부가적인 기능을 분리해서 <code class=\"language-text\">애스펙트</code>라는 독특한 모듈로 만들어서 설계하고 개발하는 방법을 <code class=\"language-text\">애스펙트 지항 프로그래밍</code> 또는 약자로 <code class=\"language-text\">AOP</code>라고 부릅니다.</p>\n<blockquote>\n<p>또는 ‘특정한 관점을 기준으로 바라본다’하여 <code class=\"language-text\">관점 지향 프로그래밍</code>이라고도 합니다.</p>\n</blockquote>\n<h2 id=\"aop-적용-기술\" style=\"position:relative;\"><a href=\"#aop-%EC%A0%81%EC%9A%A9-%EA%B8%B0%EC%88%A0\" aria-label=\"aop 적용 기술 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AOP 적용 기술</h2>\n<h4 id=\"프록시를-이용한-aop\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-aop\" aria-label=\"프록시를 이용한 aop permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시를 이용한 AOP</h4>\n<ul>\n<li>프록시로 만들어서 DI로 연결된 빈 사이에 적용해 타깃의 메소드 호출 과정에 참여해서 부가기능을 제공해주도록 만들었습니다.<br>\n프록시 방식을 사용했기 때문에 메소드 호출 과정에 참여해서 부가기능을 제공해주게 되어 있습니다.</li>\n<li>독립적으로 개발한 부가기능 모듈을 다양한 타깃 오브젝트의 메소드에 다이내믹하게 적용해주기 위해 가장 중요한 역할을 맡고 있는 게 바로 <code class=\"language-text\">프록시</code>입니다.<br>\n그래서 <code class=\"language-text\">스프링 AOP</code>는 프록시 방식의 AOP라고 할 수 있습니다.</li>\n</ul>\n<h4 id=\"바이트코드-생성과-조작을-통한-aop\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%A1%B0%EC%9E%91%EC%9D%84-%ED%86%B5%ED%95%9C-aop\" aria-label=\"바이트코드 생성과 조작을 통한 aop permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바이트코드 생성과 조작을 통한 AOP</h4>\n<ul>\n<li><code class=\"language-text\">AspectJ</code>는 스프링처럼 다이내믹 프록시 방식을 사용하지 않습니다.<br>\n<code class=\"language-text\">AspectJ</code>는 프록시처럼 간접적인 방법이 아니라, 타깃 오브젝트를 뜯어 고쳐서 부가 기능을 <code class=\"language-text\">직접</code> 넣어주는 방법을 사용한다.</li>\n<li>컴파일된 타깃의 클래스 <code class=\"language-text\">파일 자체를 수정</code>하거나 클래스가 JVM에 로딩되는 시점을 <code class=\"language-text\">가로채서</code> <code class=\"language-text\">바이트코드</code>를 조작하는 복잡한 방법을 사용합니다.</li>\n</ul>\n<p><strong>장점</strong></p>\n<ul>\n<li>자동 프록시 생성 방식을 사용하지 않아도 AOP를 적용할 수 있습니다.</li>\n<li>프록시 방식보다 훨씬 강력하고 유연한 AOP가 가능합니다.</li>\n<li>프록시를 AOP의 핵심 메커니즘으로 사용하면 부가기능을 부여할 대상은 클라이언트가 호출할 때 사용하는 메소드로 제한된다.<br>\n하지만 바이트 코드를 직접 조작해서 AOP를 적용하면 오브젝트의 생성, 필드 값의 조회와 조작, 스태틱 초기화 등의 다양한 작업에 부가 기능을 부여해 줄 수 있다.</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li>\n<p><a href=\"/category/spring/toby-spring/aop/basic-concept/#aop%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9A%A9%EC%96%B4\">AOP의 기본 용어</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%83%80%EA%B9%83target\">타깃(Target)</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EC%96%B4%EB%93%9C%EB%B0%94%EC%9D%B4%EC%8A%A4advice\">어드바이스(Advice)</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EC%A1%B0%EC%9D%B8-%ED%8F%AC%EC%9D%B8%ED%8A%B8join-point\">조인 포인트(Join Point)</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7pointcut\">포인트컷(Pointcut)</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%94%84%EB%A1%9D%EC%8B%9Cproxy\">프록시(Proxy)</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EC%96%B4%EB%93%9C%EB%B0%94%EC%9D%B4%EC%A0%80advisor\">어드바이저(Advisor)</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EC%95%A0%EC%8A%A4%ED%8E%99%ED%8A%B8aspect\">애스펙트(Aspect)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7\">포인트컷 표현식을 이용한 포인트컷</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%ED%91%9C%ED%98%84%EC%8B%9D\">포인트컷 표현식</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%8F%AC%EC%9D%B8%ED%8A%B8%EC%BB%B7-%ED%91%9C%ED%98%84%EC%8B%9D-%EB%AC%B8%EB%B2%95\">포인트컷 표현식 문법</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/spring/toby-spring/aop/basic-concept/#aop%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\">AOP란 무엇일까?</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%B6%94%EC%83%81%ED%99%94\">트랜잭션 서비스 추상화</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%94%84%EB%A1%9D%EC%8B%9C%EC%99%80-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4\">프록시와 데코레이터 패턴</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EB%8B%A4%EC%9D%B4%EB%82%B4%EB%AF%B9-%ED%94%84%EB%A1%9D%EC%8B%9C%EC%99%80-%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%B9%88\">다이내믹 프록시와 프록시 팩토리 빈</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EB%B6%80%EA%B0%80%EA%B8%B0%EB%8A%A5%EC%9D%98-%EB%AA%A8%EB%93%88%ED%99%94\">부가기능의 모듈화</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#aop-%EC%95%A0%EC%8A%A4%ED%8E%99%ED%8A%B8-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">AOP: 애스펙트 지향 프로그래밍</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/spring/toby-spring/aop/basic-concept/#aop-%EC%A0%81%EC%9A%A9-%EA%B8%B0%EC%88%A0\">AOP 적용 기술</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%ED%94%84%EB%A1%9D%EC%8B%9C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-aop\">프록시를 이용한 AOP</a></li>\n<li><a href=\"/category/spring/toby-spring/aop/basic-concept/#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%A1%B0%EC%9E%91%EC%9D%84-%ED%86%B5%ED%95%9C-aop\">바이트코드 생성과 조작을 통한 AOP</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[토비의 스프링] 6-2. AOP - 기본 용어","description":"AOP, 포인트컷, 어드바이스, 어드바이저","date":"2020.07.16","emoji":"📙","category":"spring"}}},"pageContext":{"slug":"/category/spring/toby-spring/aop/basic-concept/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/toby-spring/spring-core-technology/"},"frontmatter":{"title":"[토비의 스프링] 7. 스프링 핵심 기술의 응용","date":"2020.07.24","emoji":"🌟","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/transaction-property/"},"frontmatter":{"title":"[토비의 스프링] 6-3. AOP - 트랜잭션 속성","date":"2020.07.20","emoji":"🧩","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/unit-test-and-proxy/"},"frontmatter":{"title":"[토비의 스프링] 6-1. AOP - 단위 테스트와 프록시","date":"2020.07.11","emoji":"ℹ️","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/service-abstraction/mockup-test/"},"frontmatter":{"title":"[토비의 스프링] 5-2. 단일 책임 원칙과 테스트 추상화","date":"2020.07.07","emoji":"⚠️","category":"spring"}}}]}}}