{"componentChunkName":"component---src-templates-post-tsx","path":"/category/spring/toby-spring/object-dependency/singleton-registry/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"e3d6a911-7f34-53e8-9624-5afe83d84a28","excerpt":"싱글톤 레지스트리와 오브젝트 스코프 스프링의 애플리케이션 컨텍스트와 기존에 만들었던 DaoFactory는 중요한 차이점이 있습니다. 오브젝트의 동일성과 동등성 ? 자바에서는  에는 2가지 관점이 있습니다. 완전히 같은 객체인지 비교 동일성(identity…","html":"<h2 id=\"싱글톤-레지스트리와-오브젝트-스코프\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC%EC%99%80-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"싱글톤 레지스트리와 오브젝트 스코프 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤 레지스트리와 오브젝트 스코프</h2>\n<p>스프링의 애플리케이션 컨텍스트와 기존에 만들었던 DaoFactory는 중요한 차이점이 있습니다.</p>\n<h4 id=\"오브젝트의-동일성과-동등성-\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EB%8F%99%EC%9D%BC%EC%84%B1%EA%B3%BC-%EB%8F%99%EB%93%B1%EC%84%B1-\" aria-label=\"오브젝트의 동일성과 동등성  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오브젝트의 동일성과 동등성 ?</h4>\n<p>자바에서는 <code class=\"language-text\">두 개의 객체가 같은가?</code> 에는 2가지 관점이 있습니다.</p>\n<ol>\n<li>\n<p>완전히 같은 객체인지 비교</p>\n<ul>\n<li>동일성(identity)</li>\n<li><code class=\"language-text\">==</code> 연산자로 비교</li>\n</ul>\n</li>\n<li>\n<p>같은 정보를 담고 있는 객체인지 비교</p>\n<ul>\n<li>동등성(equality)</li>\n<li><code class=\"language-text\">equals()</code> 메서드로 비교</li>\n</ul>\n</li>\n</ol>\n<p>이를 통해서 하고 싶은 말은 스프링은 빈을 요청할 때 <code class=\"language-text\">매번 동일한 객체</code>(동일성)를 돌려준다는 것입니다.</p>\n<h4 id=\"싱글톤-레지스트리로서의-애플리케이션-컨텍스트\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"싱글톤 레지스트리로서의 애플리케이션 컨텍스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤 레지스트리로서의 애플리케이션 컨텍스트</h4>\n<p>애플리케이션 컨텍스트는 싱글톤을 저장하고 관리하는 <code class=\"language-text\">싱글톤 레지스트리</code>이기도 합니다.</p>\n<h5 id=\"스프링은-왜-싱글톤으로-빈을-만들까-\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%80-%EC%99%9C-%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9C%BC%EB%A1%9C-%EB%B9%88%EC%9D%84-%EB%A7%8C%EB%93%A4%EA%B9%8C-\" aria-label=\"스프링은 왜 싱글톤으로 빈을 만들까  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링은 왜 싱글톤으로 빈을 만들까 ?</h5>\n<p>스프링이 주로 적용되는 대상이 <code class=\"language-text\">서버 환경</code>이기 때문입니다.</p>\n<p>스프링이 처음 설계될때 대규모 엔터프라이즈 서버 환경은 초당 수십, 수백번씩 브라우저나 다른 시스템으로부터 요청을 받아 처리해야하는 <code class=\"language-text\">높은 성능이 요구 되는 환경</code>이였습니다.<br>\n(데이터 액세스 로직, 서비스 로직, 비즈니스 로직 .. 등을 분리하는 계층형 구조)</p>\n<p>그런데, 매번 클라이언트에서 요청이 올 때마다 각 로직의 객체를 <code class=\"language-text\">매번 새로 생성</code>하게 되면 ?</p>\n<p>요청 한 번에 5개 객체 + 초 당 500개의 요청이 들어오면 1시간에 9백만개의 객체가 새로 생성됩니다.</p>\n<p>이렇게 부하가 걸리면 <code class=\"language-text\">서버가 감당하기 힘들기 때문</code>에 서버 환경에서는 싱글톤 사용이 권장됩니다.</p>\n<h5 id=\"스프링은-ioc-컨테이너--싱글톤-레지스트리\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%80-ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88--%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC\" aria-label=\"스프링은 ioc 컨테이너  싱글톤 레지스트리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링은 IoC 컨테이너 + 싱글톤 레지스트리</h5>\n<p>스프링은 직접 싱글톤 형태의 객체를 만들고 관리하는 기능을 제공합니다.</p>\n<blockquote>\n<p>이게 바로 싱글톤 레지스트리 (singleton registry)</p>\n</blockquote>\n<p>싱글톤 레지스트리의 <code class=\"language-text\">장점</code>은 평범한 자바 클래스를 싱글톤으로 활용하게 도와준다는 점입니다.</p>\n<blockquote>\n<p>기존 싱글톤 패턴을 적용하려면 private 생성자 + static 메서드로 구현해야함)</p>\n</blockquote>\n<p>싱글톤으로 사용돼야 하는 상황이 아닌 경우 (Ex: 테스팅 환경) 에도 자유롭게 여러 객체를 생성해서 사용 가능합니다.</p>\n<h4 id=\"싱글톤으로-만들어지기-때문에-주의-해야할-점\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%80%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EC%A3%BC%EC%9D%98-%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\" aria-label=\"싱글톤으로 만들어지기 때문에 주의 해야할 점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤으로 만들어지기 때문에 주의 해야할 점</h4>\n<p>멀티스레드 환경에서는 싱글톤 객체 하나를 여러 스레드에서 나누어 사용할 수 있습니다.</p>\n<p>따라서, 싱글톤은 기본적으로 인스턴스 변수의 값을 변경하는 방식으로 만들지 않습니다.</p>\n<blockquote>\n<p>단, 읽기 전용 값이라면 인스턴스 변수를 사용하는 것에 제약이 없다 !</p>\n</blockquote>\n<p>그래서 <code class=\"language-text\">메서드 파라미터</code>, <code class=\"language-text\">로컬 변수</code>, <code class=\"language-text\">리턴 값</code> 등을 이용합니다.</p>\n<p>이들은 매번 새로운 값을 저장할 독립적인 공간(<code class=\"language-text\">스택</code>) 에서 만들어집니다.</p>\n<p>따라서, 싱글톤이라고 해도 여러 스레드가 값을 덮어쓸 일은 없습니다.</p>\n<hr>\n<p><strong>Ex) Java 변수의 종류</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> iv<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 인스턴스 변수 (힙에 저장) -> test 객체가 heap에 저장</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> cv<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 클래스 변수 (메모리 맨위에 먼저 올림 - static)</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> lv<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 로컬 변수 (스택에 저장)</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"스프링-빈의-스코프\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"스프링 빈의 스코프 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링 빈의 스코프</h4>\n<p><strong>빈의 스코프(scope)란 ?</strong><br>\n스프링이 관리하는 객체, 즉 빈이 생성되고 존재하고 적용되는 범위</p>\n<p>스프링 빈의 기본 스코프는 싱글톤입니다.</p>\n<p>경우에 따라서 싱글톤 외의 스코프를 가질 수 있습니다.</p>\n<p>대표적으로 프로토타입 스코프(prototype), 싱글톤과 달리 빈을 요청할 때마다 새로운 객체를 만들어줍니다.</p>\n<p>그 외에도 요청 스코프, 세션 스코프 등이 있습니다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>이상으로 다음 포스팅은 <code class=\"language-text\">의존관계 주입(DI)</code>에 대해서 알아보겠습니다 🙇🏻‍♂️</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC%EC%99%80-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%EC%BD%94%ED%94%84\">싱글톤 레지스트리와 오브젝트 스코프</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EB%8F%99%EC%9D%BC%EC%84%B1%EA%B3%BC-%EB%8F%99%EB%93%B1%EC%84%B1-\">오브젝트의 동일성과 동등성 ?</a></li>\n<li>\n<p><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\">싱글톤 레지스트리로서의 애플리케이션 컨텍스트</a></p>\n<ul>\n<li><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%80-%EC%99%9C-%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9C%BC%EB%A1%9C-%EB%B9%88%EC%9D%84-%EB%A7%8C%EB%93%A4%EA%B9%8C-\">스프링은 왜 싱글톤으로 빈을 만들까 ?</a></li>\n<li><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%80-ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88--%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%8A%B8%EB%A6%AC\">스프링은 IoC 컨테이너 + 싱글톤 레지스트리</a></li>\n</ul>\n</li>\n<li><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%80%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EC%A3%BC%EC%9D%98-%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\">싱글톤으로 만들어지기 때문에 주의 해야할 점</a></li>\n<li><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%98-%EC%8A%A4%EC%BD%94%ED%94%84\">스프링 빈의 스코프</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/spring/toby-spring/object-dependency/singleton-registry/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>","frontmatter":{"title":"[토비의 스프링] 1. 오브젝트와 의존관계 - 싱글톤 레지스트리와 오브젝트 스코프","description":"싱글톤, 오브젝트 스코프","date":"2020.06.10","emoji":"🔭","category":"spring"}}},"pageContext":{"slug":"/category/spring/toby-spring/object-dependency/singleton-registry/","relatedPosts":[{"node":{"fields":{"slug":"/category/spring/toby-spring/spring-core-technology/"},"frontmatter":{"title":"[토비의 스프링] 7. 스프링 핵심 기술의 응용","date":"2020.07.24","emoji":"🌟","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/transaction-property/"},"frontmatter":{"title":"[토비의 스프링] 6-3. AOP - 트랜잭션 속성","date":"2020.07.20","emoji":"🧩","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/basic-concept/"},"frontmatter":{"title":"[토비의 스프링] 6-2. AOP - 기본 용어","date":"2020.07.16","emoji":"📙","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/aop/unit-test-and-proxy/"},"frontmatter":{"title":"[토비의 스프링] 6-1. AOP - 단위 테스트와 프록시","date":"2020.07.11","emoji":"ℹ️","category":"spring"}}},{"node":{"fields":{"slug":"/category/spring/toby-spring/service-abstraction/mockup-test/"},"frontmatter":{"title":"[토비의 스프링] 5-2. 단일 책임 원칙과 테스트 추상화","date":"2020.07.07","emoji":"⚠️","category":"spring"}}}]}}}