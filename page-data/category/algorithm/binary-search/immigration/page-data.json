{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/binary-search/immigration/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"17eff4d5-8bde-50ee-9619-dbfcf5f682c0","excerpt":"LEVEL 3 - ‘입국심사’ 문제 보러 가기 ! https://programmers.co.kr/learn/courses/30/lessons/43238 문제 설명 n…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">LEVEL 3 - ‘입국심사’ 문제 보러 가기 !</div><div class=\"custom-block-body\"><p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/43238\">https://programmers.co.kr/learn/courses/30/lessons/43238</a></p></div></div>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>n명이 입국심사를 위해 줄을 서서 기다리고 있습니다.<br>\n각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.</p>\n<p>처음에 모든 심사대는 비어있습니다.<br>\n한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다.<br>\n가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다.<br>\n하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.</p>\n<p>모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.</p>\n<p>입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.</p>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<p>문제를 처음 보았을 때는 for 문을 돌면서 일일히 확인하는 문제인가 싶었지만 수의 범위가 너무 크기에 불가능해서 해당 방법으로는 풀 수 없다고 판단하여 이분 탐색의 개념에 대해 더 알아보고 문제에 접근했습니다.</p>\n<p><code class=\"language-text\">문제의 핵심</code>은 <code class=\"language-text\">최소, 최대 범위</code>를 구한 뒤 구하려고 하는 답을 <code class=\"language-text\">이분 탐색으로 범위를 좁혀</code>가며 답을 구하는 것 입니다.</p>\n<ul>\n<li>문제에서 최대 범위는 심사관 중 가장 오래걸리는 심사관을 계속 검사 받는 경우입니다.</li>\n<li>\n<p>최소, 최대 범위의 중간값인 <code class=\"language-text\">mid</code>가 <code class=\"language-text\">n명</code>을 심사 할 수 있는 지 아닌 지를 파악하며 이분 탐색을 진행합니다.</p>\n<ul>\n<li><code class=\"language-text\">n명</code>을 심사 할 수 있다면, 답을 갱신하고, 최대 범위를 줄여봅니다.</li>\n<li><code class=\"language-text\">n명</code>을 심사 할 수 없다면, 최소범위를 늘려봅니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 코드</h2>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    leng <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">)</span>\n    left <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    right <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>leng<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 최대 범위</span>\n\n    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> time <span class=\"token keyword\">in</span> times<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">+=</span> mid <span class=\"token operator\">//</span> time\n            <span class=\"token comment\"># 심사 인원수를 넘으면 다음 단계</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n\n        <span class=\"token comment\"># n명을 심사 할 수 있는 경우</span>\n        <span class=\"token comment\"># 한 심사관에게 주어진 시간을 줄여본다.</span>\n        <span class=\"token keyword\">if</span> count <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">:</span>\n            answer <span class=\"token operator\">=</span> mid\n            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 없는 경우</span>\n        <span class=\"token keyword\">elif</span> count <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/category/algorithm/binary-search/immigration/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n<li><a href=\"/category/algorithm/binary-search/immigration/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></li>\n<li><a href=\"/category/algorithm/binary-search/immigration/#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\">풀이 코드</a></li>\n</ul>","frontmatter":{"title":"[프로그래머스] 입국심사 - 이진탐색 알고리즘 / Python","description":"","date":"2020.06.17","emoji":"🔍","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/binary-search/immigration/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/travel-route/"},"frontmatter":{"title":"[프로그래머스] 여행 경로 - DFS & BFS 알고리즘 / Python","date":"2020.06.25","emoji":"✈️","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/word-conversion/"},"frontmatter":{"title":"[프로그래머스] 단어 변환 - DFS & BFS 알고리즘 / Python","date":"2020.06.21","emoji":"🔄","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/network/"},"frontmatter":{"title":"[프로그래머스] 네트워크 - DFS & BFS 알고리즘 / Python","date":"2020.06.18","emoji":"🌏","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/greedy/island-connection/"},"frontmatter":{"title":"[프로그래머스] 섬 연결하기 - 그리디 알고리즘 / Python","date":"2020.06.15","emoji":"🏝","category":"algorithm"}}}]}}}