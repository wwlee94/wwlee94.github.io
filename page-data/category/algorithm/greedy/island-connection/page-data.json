{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/greedy/island-connection/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"38100ca7-0dc0-5dac-903d-5869469871af","excerpt":"LEVEL 3 - ‘섬 연결하기’ 문제 보러 가기 ! https://programmers.co.kr/learn/courses/30/lessons/42861 문제 설명 n개의 섬 사이에 다리를 건설하는 비용(costs…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">LEVEL 3 - ‘섬 연결하기’ 문제 보러 가기 !</div><div class=\"custom-block-body\"><p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42861\">https://programmers.co.kr/learn/courses/30/lessons/42861</a></p></div></div>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>n개의 섬 사이에 다리를 건설하는 비용(costs)이 주어질 때, 최소의 비용으로 모든 섬이 서로 통행 가능하도록 만들 때 필요한 최소 비용을 return 하도록 solution을 완성하세요.</p>\n<p>다리를 여러 번 건너더라도, 도달할 수만 있으면 통행 가능하다고 봅니다.<br>\n예를 들어 A 섬과 B 섬 사이에 다리가 있고, B 섬과 C 섬 사이에 다리가 있으면 A 섬과 C 섬은 서로 통행 가능합니다.</p>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<p>그리디 알고리즘 분류에 있던 문제라 그래프 문제는 안나오는 줄 알았지만 !!<br>\n문제를 보고 바로 <code class=\"language-text\">그래프 + 그리디</code> 알고리즘 임을 깨달았습니다.<br>\n<code class=\"language-text\">크루스칼</code>, <code class=\"language-text\">프림</code> 알고리즘 모두 <code class=\"language-text\">그래프 + 그리디</code> 알고리즘에 속한다는 것을.. 🤭</p>\n<p>해당 문제는 <code class=\"language-text\">최소 신장 트리(MST)</code>를 구현하는 문제입니다.</p>\n<p>즉, <code class=\"language-text\">크루스칼</code> 또는 <code class=\"language-text\">프림</code> 알고리즘으로 <code class=\"language-text\">최소 신장 트리</code>를 구현하기만 하면 해결 할 수 있는 문제입니다.</p>\n<p>저는 <code class=\"language-text\">크루스칼</code> 알고리즘을 사용하여 문제를 접근했습니다.</p>\n<h4 id=\"크루스칼-알고리즘이란-\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80-\" aria-label=\"크루스칼 알고리즘이란  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크루스칼 알고리즘이란 ?</h4>\n<p>현재 상황 기준으로 가장 최적의 답을 선택해 문제를 푸는 <code class=\"language-text\">그리디 알고리즘</code>을 사용하여 모든 정점을 최소 비용으로 연결하는 최적 해답을 구하는 알고리즘입니다.</p>\n<h4 id=\"크루스칼-구현-과정\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EA%B5%AC%ED%98%84-%EA%B3%BC%EC%A0%95\" aria-label=\"크루스칼 구현 과정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크루스칼 구현 과정</h4>\n<ol>\n<li>\n<p>그래프의 간선들을 비용의 오름차순으로 정렬합니다.</p>\n<blockquote>\n<p>이는 비용이 가장 적은 간선을 선택하기 위함입니다.</p>\n</blockquote>\n</li>\n<li>\n<p>가장 비용이 작은 간선을 선택합니다.</p>\n<ul>\n<li>선택한 간선이 사이클을 이룬다면, 제외합니다.</li>\n<li>사이클을 이루지 않는다면 해당 간선을 선택합니다.</li>\n</ul>\n</li>\n<li>최종적으로 선택한 간선의 가중치를 모두 합하여 반환합니다.</li>\n</ol>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 코드</h2>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> costs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 부모 노드를 찾는 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_parent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> x\n        parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 두 부모 노드를 합치는 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">union_parent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 더 작은 값을 부모로 지칭</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">:</span> parent<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y\n\n    <span class=\"token comment\"># 두 노드가 같은 부모를 가지는 지 찾는 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_same_parent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\"># 특정 간선의 부모 정보 (초기는 자기 자신을 가리킴)</span>\n    parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>costs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>costs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n\n    answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 선택될 간선을 담을 리스트</span>\n    costs<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 비용이 가장 작은 간선부터 선택</span>\n\n    <span class=\"token comment\"># 주어진 간선이 최소 간선의 개수 일때 (n-1개)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>costs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> costs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 총 만들어지는 간선의 개수는 n-1개</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        edge <span class=\"token operator\">=</span> costs<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 두 점의 부모가 같은지 Check</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_same_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            union_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            answer<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p><code class=\"language-text\">크루스칼 알고리즘</code>의 핵심은 사이클을 이루는지에 대한 여부를 확인하는 로직을 구현하는 것입니다.<br>\n저는 현재 집합이 같은 부모를 향하고 있는지(사이클이 발생하는지) 여부를 알 수 있는 <code class=\"language-text\">Union-Find</code>라는 알고리즘을 사용하여 문제를 해결했습니다.</p>\n<p>또한, 주의할 점은 주어진 간선(<code class=\"language-text\">costs</code>의 개수) 이 <code class=\"language-text\">(n-1)개</code> 일 경우 입니다.<br>\n해당 경우에는 그냥 주어진 간선의 비용을 모두 합해서 return하면 됩니다.</p>\n<p>코드의 길이는 각 기능을 함수로 빼는 과정에서 풀이가 길어진 것 같습니다.</p>\n<p>더 좋은 방법이 있다면 알려주세욘 🙇🏻‍♂️</p>","tableOfContents":"<ul>\n<li><a href=\"/category/algorithm/greedy/island-connection/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n<li>\n<p><a href=\"/category/algorithm/greedy/island-connection/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/algorithm/greedy/island-connection/#%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80-\">크루스칼 알고리즘이란 ?</a></li>\n<li><a href=\"/category/algorithm/greedy/island-connection/#%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EA%B5%AC%ED%98%84-%EA%B3%BC%EC%A0%95\">크루스칼 구현 과정</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/algorithm/greedy/island-connection/#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\">풀이 코드</a></li>\n<li><a href=\"/category/algorithm/greedy/island-connection/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>","frontmatter":{"title":"[프로그래머스] 그리디 - 섬 연결하기 / Python","description":"","date":"2020.06.15","emoji":"🏝","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/greedy/island-connection/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/dp/ long-run/"},"frontmatter":{"title":"[프로그래머스] DP - 멀리 뛰기 / Python","date":"2020.08.15","emoji":"🏃🏻‍♂️","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/target-number/"},"frontmatter":{"title":"[프로그래머스] DFS & BFS - 타겟 넘버 / Python","date":"2020.07.22","emoji":"🔢","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/dp/school-road/"},"frontmatter":{"title":"[프로그래머스] DP - 등굣길 / Python","date":"2020.07.18","emoji":"🚌","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/brute-force-search/find-prime-numbers/"},"frontmatter":{"title":"[프로그래머스] 완전탐색 - 소수 찾기 / Python","date":"2020.07.14","emoji":"🔍","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/hash/camouflage/"},"frontmatter":{"title":"[프로그래머스] 해시 - 위장 / Python","date":"2020.07.12","emoji":"🌫","category":"algorithm"}}}]}}}