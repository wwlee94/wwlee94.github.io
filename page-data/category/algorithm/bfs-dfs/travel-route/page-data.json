{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/bfs-dfs/travel-route/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"d4bd7a12-183e-5813-8f70-6206801f6c14","excerpt":"LEVEL 3 - ‘여행 경로’ 문제 보러 가기 ! https://programmers.co.kr/learn/courses/30/lessons/43163 문제 설명 주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 ‘ICN’ 공항에서 출발합니다. 항공권 정보가 담긴…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">LEVEL 3 - ‘여행 경로’ 문제 보러 가기 !</div><div class=\"custom-block-body\"><p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/43163\">https://programmers.co.kr/learn/courses/30/lessons/43163</a></p></div></div>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다.<br>\n항상 ‘ICN’ 공항에서 출발합니다.</p>\n<p>항공권 정보가 담긴 2차원 배열 tickets가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h4 id=\"제한-사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\" aria-label=\"제한 사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한 사항</h4>\n<ul>\n<li>모든 공항은 알파벳 대문자 3글자로 이루어집니다.</li>\n<li>주어진 공항 수는 3개 이상 10,000개 이하입니다.</li>\n<li>tickets의 각 행 [a, b]는 a 공항에서 b 공항으로 가는 항공권이 있다는 의미입니다.</li>\n<li>주어진 항공권은 모두 사용해야 합니다.</li>\n<li>만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 합니다.</li>\n<li>모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.</li>\n</ul>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<p><code class=\"language-text\">여행 경로</code> 문제를 처음 풀었을 때 예제는 맞았지만 제출시 1,2번 테스트에서 계속 실패했었습니다.</p>\n<p>그래서 구글링을 통해 조사한 결과 1,2번 테스트 케이스는 다음과 같은 예제라고 의견이 나왔습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\">ticket\n<span class=\"token number\">1.</span> <span class=\"token string\">\"ICN\"</span> -> <span class=\"token string\">\"AAA\"</span>\n<span class=\"token number\">2.</span> <span class=\"token string\">\"ICN\"</span> -> <span class=\"token string\">\"BBB\"</span>\n<span class=\"token number\">3.</span> <span class=\"token string\">\"BBB\"</span> -> <span class=\"token string\">\"ICN\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위와 같은 예제일 경우 동작 과정을 살펴보면,</p>\n<p>문제 조건에 맞는 선택은 알파벳 순서 이므로 1번을 바로 고를 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\">path\n<span class=\"token string\">\"ICN\"</span> -> <span class=\"token string\">\"AAA\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>하지만, 이 경우 티켓은 남아있지만 ‘AAA’ 공항 이후 갈 수 있는 곳이 없습니다.</p>\n<p>따라서, 위의 선택은 잘못되었으며 해당 티켓은 반환한 뒤 다른 경로(‘BBB’)를 찾아야합니다.</p>\n<p>2번 -> 3번 -> 1번</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\">path\n<span class=\"token string\">\"ICN\"</span> -> <span class=\"token string\">\"BBB\"</span> -> <span class=\"token string\">\"ICN\"</span> -> <span class=\"token string\">\"AAA\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ol>\n<li><code class=\"language-text\">{ 시작점 : [도착점], ... }</code> 형태의 <code class=\"language-text\">인접 리스트</code> 그래프를 생성합니다.</li>\n<li>‘도착점’의 리스트를 정렬합니다. (알파벳 순서로)</li>\n<li>\n<p><code class=\"language-text\">DFS 알고리즘</code>을 사용해 모든 점을 순회합니다. (스택이 빌때까지)</p>\n<ul>\n<li>스택에서 가장 위 데이터(top)를 가져옵니다.</li>\n<li>가져온 데이터(top)가 그래프에 없거나, 티켓을 모두 사용한 경우, <code class=\"language-text\">path</code>에 저장</li>\n<li>아니라면, 가져온 데이터(top)을 시작점으로 하는 도착점 데이터 중 가장 앞 데이터(알파벳순으로 선택해야하므로)를 가져와 <code class=\"language-text\">stack</code>에 저장</li>\n</ul>\n</li>\n<li>path를 역순으로 출력 !</li>\n</ol>\n<p><strong>위의 ‘stack’, ‘path’ 출력 과정은 다음과 같습니다 !</strong></p>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">path <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AAA'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'AAA'</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'AAA'</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BBB'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'AAA'</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BBB'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'AAA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BBB'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'AAA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BBB'</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span>\n\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'AAA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BBB'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">]</span>\nstack <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 역순 출력</span>\npath <span class=\"token punctuation\">[</span><span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BBB'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AAA'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 코드</h2>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 특정 티켓의 인접 리스트를 구하는 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">init_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        routes <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> tickets<span class=\"token punctuation\">:</span>\n            routes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> routes\n\n    <span class=\"token comment\"># 스택을 사용한 DFS</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ICN\"</span><span class=\"token punctuation\">]</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 가려고하는 경로를 저장하는 변수</span>\n        <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># stack이 비어있을 때까지</span>\n            top <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 특정 공항에서 출발하는 표가 없다면 또는 있지만 티켓을 다 써버린 경우</span>\n            <span class=\"token keyword\">if</span> top <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> routes <span class=\"token keyword\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    routes <span class=\"token operator\">=</span> init_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> routes<span class=\"token punctuation\">:</span>\n        routes<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    answer <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"dfs-재귀를-이용한-풀이\" style=\"position:relative;\"><a href=\"#dfs-%EC%9E%AC%EA%B7%80%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%92%80%EC%9D%B4\" aria-label=\"dfs 재귀를 이용한 풀이 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DFS 재귀를 이용한 풀이</h4>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 특정 티켓의 인접 리스트를 구하는 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">init_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        routes <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> tickets<span class=\"token punctuation\">:</span>\n            routes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> routes\n\n    <span class=\"token comment\"># 재귀 호출을 사용한 DFS</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> footprint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>footprint<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> footprint\n\n        <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> country <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            routes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n\n            fp <span class=\"token operator\">=</span> footprint<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># deepcopy</span>\n            fp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span>\n\n            ret <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> ret<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> ret <span class=\"token comment\"># 모든 티켓을 사용해 통과한 경우</span>\n\n            routes<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 통과 못했으면 티켓 반환</span>\n\n    routes <span class=\"token operator\">=</span> init_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> routes<span class=\"token punctuation\">:</span>\n        routes<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    N <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tickets<span class=\"token punctuation\">)</span>\n    answer <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">(</span><span class=\"token string\">\"ICN\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ICN\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/algorithm/bfs-dfs/travel-route/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/algorithm/bfs-dfs/travel-route/#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\">제한 사항</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/algorithm/bfs-dfs/travel-route/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></li>\n<li>\n<p><a href=\"/category/algorithm/bfs-dfs/travel-route/#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\">풀이 코드</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/algorithm/bfs-dfs/travel-route/#dfs-%EC%9E%AC%EA%B7%80%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%92%80%EC%9D%B4\">DFS 재귀를 이용한 풀이</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[프로그래머스] 여행 경로 - DFS & BFS 알고리즘 / Python","description":"","date":"2020.06.25","emoji":"✈️","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/bfs-dfs/travel-route/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/hash/camouflage/"},"frontmatter":{"title":"[프로그래머스] 위장 - 해시 알고리즘 / Python","date":"2020.07.12","emoji":"🌫","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/dp/tile-decorations/"},"frontmatter":{"title":"[프로그래머스] 타일 장식물 - DP 알고리즘 / Python","date":"2020.07.09","emoji":"🖼","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/dp/2xn-tiling/"},"frontmatter":{"title":"[프로그래머스] 2xn 타일링 - DP 알고리즘 / Python","date":"2020.07.05","emoji":"🔳","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/word-conversion/"},"frontmatter":{"title":"[프로그래머스] 단어 변환 - DFS & BFS 알고리즘 / Python","date":"2020.06.21","emoji":"🔄","category":"algorithm"}}}]}}}