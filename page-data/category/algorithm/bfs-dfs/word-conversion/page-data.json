{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/bfs-dfs/word-conversion/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"97136fe7-1388-56d9-aea9-9ce217c8ba75","excerpt":"LEVEL 3 - ‘단어 변환’ 문제 보러 가기 ! https://programmers.co.kr/learn/courses/30/lessons/43163 문제 설명 두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">LEVEL 3 - ‘단어 변환’ 문제 보러 가기 !</div><div class=\"custom-block-body\"><p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/43163\">https://programmers.co.kr/learn/courses/30/lessons/43163</a></p></div></div>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.</p>\n<ol>\n<li>한 번에 한 개의 알파벳만 바꿀 수 있습니다.</li>\n<li>words에 있는 단어로만 변환할 수 있습니다.</li>\n</ol>\n<p>예를 들어 begin이 ‘hit’, target가 ‘cog’, words가 [‘hot’,‘dot’,‘dog’,‘lot’,‘log’,‘cog’]라면 ‘hit’ -> ‘hot’ -> ‘dot’ -> ‘dog’ -> ‘cog’와 같이 4단계를 거쳐 변환할 수 있습니다.</p>\n<p>두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.</p>\n<h4 id=\"제한-사항\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\" aria-label=\"제한 사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한 사항</h4>\n<ul>\n<li>각 단어는 알파벳 소문자로만 이루어져 있습니다.</li>\n<li>각 단어의 길이는 3 이상 10 이하이며 모든 단어의 길이는 같습니다.</li>\n<li>words에는 3개 이상 50개 이하의 단어가 있으며 중복되는 단어는 없습니다.</li>\n<li>begin과 target은 같지 않습니다.</li>\n<li>변환할 수 없는 경우에는 0를 return 합니다.</li>\n</ul>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<p><code class=\"language-text\">단어 변환</code> 문제의 핵심 !</p>\n<ul>\n<li>각 단어가 변환될 수 있는 모든 경우를 탐색하며 target 단어가 선택 되는 최소 층(level)을 구하는 문제입니다.</li>\n</ul>\n<p><code class=\"language-text\">가장 최소가 되는 단계</code>를 구하는 문제이기 때문에 DFS가 아닌 <code class=\"language-text\">BFS로 접근</code>해서 문제를 해결해야합니다.</p>\n<ol>\n<li>현재 노드에서 갈 수 있는 다른 경로 구하는 함수를 작성합니다.</li>\n<li><code class=\"language-text\">1번 함수</code>를 사용해 각 노드 별 변환 될 수 있는 모든 노드 리스트를 저장합니다.</li>\n<li>문제에서 주어지는 <code class=\"language-text\">첫 단어를 시작</code>으로 <code class=\"language-text\">BFS</code>로 인접한 노드를 방문합니다.</li>\n<li>현재 단어와 target이 같으면 <code class=\"language-text\">현재 층</code>(level)을 반환합니다.</li>\n</ol>\n<p><strong>path에 담기는 정보 예시</strong></p>\n<p>초기 정보가 다음과 같을 때</p>\n<div class=\"gatsby-code-title\">초기값</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">begin <span class=\"token operator\">=</span> <span class=\"token string\">'hit'</span>\nwords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lot'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cog'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>path 변수의 출력 예시</p>\n<ul>\n<li>주어진 모든 <code class=\"language-text\">words</code>에 대해 각 단어가 갈 수 있는 경로를 담은 것</li>\n</ul>\n<div class=\"gatsby-code-title\">path변수</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"hot\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hit\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dot\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lot\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dog\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cog\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lot\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"log\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"log\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cog\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"cog\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"log\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"hit\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hot\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 코드</h2>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 1. 현재 노드에서 갈 수 있는 다른 경로 구하는 함수</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_path</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n            count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> current<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> arr\n\n    <span class=\"token comment\"># 2. path에 각 노드 별 변환 될 수 있는 모든 노드 리스트 저장</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">init_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 초기값도 추가</span>\n\n        <span class=\"token comment\"># path 초기화</span>\n        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> get_path<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> word <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> path<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                path<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> path\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        path <span class=\"token operator\">=</span> init_path<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 3. 첫 단어를 시작으로 BFS로 인접한 노드를 방문합니다.</span>\n        <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n            current<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># 4. 현재 단어와 target이 같으면 정답에 도달 !</span>\n            <span class=\"token keyword\">if</span> current <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                answer <span class=\"token operator\">=</span> visited\n                <span class=\"token keyword\">break</span>\n\n            <span class=\"token comment\"># 인접한 노드를 방문</span>\n            <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> path<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n                    queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># target이 words에 없으면 답을 못 구하니 0 반환</span>\n    <span class=\"token keyword\">if</span> target <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    answer <span class=\"token operator\">=</span> bfs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/algorithm/bfs-dfs/word-conversion/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/algorithm/bfs-dfs/word-conversion/#%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\">제한 사항</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/algorithm/bfs-dfs/word-conversion/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></li>\n<li><a href=\"/category/algorithm/bfs-dfs/word-conversion/#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\">풀이 코드</a></li>\n</ul>","frontmatter":{"title":"[프로그래머스] 단어 변환 - DFS & BFS 알고리즘 / Python","description":"","date":"2020.06.21","emoji":"🔄","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/bfs-dfs/word-conversion/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/travel-route/"},"frontmatter":{"title":"[프로그래머스] 여행 경로 - DFS & BFS 알고리즘 / Python","date":"2020.06.25","emoji":"✈️","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/network/"},"frontmatter":{"title":"[프로그래머스] 네트워크 - DFS & BFS 알고리즘 / Python","date":"2020.06.18","emoji":"🌏","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/binary-search/immigration/"},"frontmatter":{"title":"[프로그래머스] 입국심사 - 이진탐색 알고리즘 / Python","date":"2020.06.17","emoji":"🔍","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/greedy/island-connection/"},"frontmatter":{"title":"[프로그래머스] 섬 연결하기 - 그리디 알고리즘 / Python","date":"2020.06.15","emoji":"🏝","category":"algorithm"}}}]}}}