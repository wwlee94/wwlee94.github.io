{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/competition/2018-kakao/news-clustering/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"40f7c501-dce5-526a-a623-81c1ebea0f4e","excerpt":"LEVEL 2 - ‘뉴스 클러스터링’ 문제 보러 가기 ! https://programmers.co.kr/learn/courses/30/lessons/1767…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">LEVEL 2 - ‘뉴스 클러스터링’ 문제 보러 가기 !</div><div class=\"custom-block-body\"><p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/17677\">https://programmers.co.kr/learn/courses/30/lessons/17677</a></p></div></div>\n<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<p>‘뉴스 클러스터링’ 문제의 핵심</p>\n<p><code class=\"language-text\">자카드 유사도</code>라는 개념이 등장하는데, 다음과 같습니다.</p>\n<p>‘자카드 유사도’ 는 문자열 사이의 유사도를 계산하는데도 이용할 수 있습니다.<br>\n문자열 FRANCE와 FRENCH가 주어졌을 때, 이를 두 글자씩 끊어서 다중집합을 만들 수 있습니다.</p>\n<p>각각의 집합은 {FR, RA, AN, NC, CE}, {FR, RE, EN, NC, CH} 가 되며,<br>\n교집합은 {FR, NC},<br>\n합집합은 {FR, RA, AN, NC, CE, RE, EN, CH} 가 되므로,<br>\n두 문자열 사이의 ‘자카드 유사도’는 <code class=\"language-text\">J(&#39;FRANCE&#39;, &#39;FRENCH&#39;)</code> = 2/8 = 0.25 가 됩니다.</p>\n<p>위와 같이 주어지는 예시의 <code class=\"language-text\">자카드 유사도</code>를 구하는 문제입니다.</p>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<p><strong>이 문제는 해당 조건에 맞는 로직을 구현할 수 있는지 물어보는 문제입니다.</strong></p>\n<blockquote>\n<p>저는 정규식(Regex), 집합(Set), 해시(Hash)를 사용하여 문제를 해결했습니다.</p>\n</blockquote>\n<ol>\n<li>우선 주어진 문자열 A, B를 <code class=\"language-text\">두 글자</code>씩 끊은 새로운 리스트(<code class=\"language-text\">split_list</code>)를 만들어야합니다.</li>\n<li>\n<p>문제 조건에 나오는 <code class=\"language-text\">다중 집합</code>을 구현하려면 각 문자의 개수를 구해야하므로 각 두 문자열의 리스트를 다음과 같이 만듭니다.</p>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">set_A <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>split_list_A<span class=\"token punctuation\">)</span>\nset_B <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>split_list_B<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 모든 종류를 담기 위해 Set을 사용</span>\ntypes <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>set_A <span class=\"token operator\">|</span> set_B<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>그러면 두 문자열의 모든 종류가 담깁니다 !</li>\n</ul>\n</li>\n<li>\n<p>위에서 나온 모든 종류를 순회하며 각 A,B 문자열에서 개수를 <code class=\"language-text\">Dictionary</code>로 셉니다.</p>\n<ul>\n<li>개수가 작은 것은 추후 <code class=\"language-text\">교집합</code>이 되고 큰 것은 <code class=\"language-text\">합집합</code>에 포함됩니다.</li>\n</ul>\n</li>\n<li>나온 <code class=\"language-text\">교집합</code>과 <code class=\"language-text\">합집합</code>을 문제의 조건에 맞게 계산하여 결과를 출력합니다.</li>\n</ol>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 코드</h2>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]{2}'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 문자열을 두 글자씩 끊어 리스트로 만들어주는 메서드</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">split_list</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        leng <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n        string <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>leng<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> string<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> arr\n\n    list_A <span class=\"token operator\">=</span> split_list<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span>\n    list_B <span class=\"token operator\">=</span> split_list<span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span>\n\n    set_A <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>list_A<span class=\"token punctuation\">)</span>\n    set_B <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>list_B<span class=\"token punctuation\">)</span>\n    types <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>set_A <span class=\"token operator\">|</span> set_B<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 각 A, B 집합의 합집합의 모든 종류</span>\n\n    <span class=\"token comment\"># 교집합, 합집합 종류를 count 해주는 dictionary</span>\n    inter_dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    union_dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> types<span class=\"token punctuation\">:</span>\n        a_count <span class=\"token operator\">=</span> list_A<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        b_count <span class=\"token operator\">=</span> list_B<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        inter_dic<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>a_count<span class=\"token punctuation\">,</span> b_count<span class=\"token punctuation\">)</span>\n        union_dic<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>a_count<span class=\"token punctuation\">,</span> b_count<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 다중 집합의 교집합</span>\n    intersection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> inter_dic<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>inter_dic<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            intersection<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 다중 집합의 합집합</span>\n    union <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> union_dic<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>union_dic<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            union<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>union<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>intersection<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>intersection<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>union<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>answer <span class=\"token operator\">*</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/category/algorithm/competition/2018-kakao/news-clustering/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></li>\n<li><a href=\"/category/algorithm/competition/2018-kakao/news-clustering/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></li>\n<li><a href=\"/category/algorithm/competition/2018-kakao/news-clustering/#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\">풀이 코드</a></li>\n</ul>","frontmatter":{"title":"[프로그래머스] 뉴스 클러스터링 - [1차] 2018 카카오 / Python","description":"","date":"2020.06.05","emoji":"🌤","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/competition/2018-kakao/news-clustering/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/dp/2xn-tiling/"},"frontmatter":{"title":"[프로그래머스] 2xn 타일링 - DP 알고리즘 / Python","date":"2020.07.05","emoji":"⏹","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/travel-route/"},"frontmatter":{"title":"[프로그래머스] 여행 경로 - DFS & BFS 알고리즘 / Python","date":"2020.06.25","emoji":"✈️","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/word-conversion/"},"frontmatter":{"title":"[프로그래머스] 단어 변환 - DFS & BFS 알고리즘 / Python","date":"2020.06.21","emoji":"🔄","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/network/"},"frontmatter":{"title":"[프로그래머스] 네트워크 - DFS & BFS 알고리즘 / Python","date":"2020.06.18","emoji":"🌏","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/binary-search/immigration/"},"frontmatter":{"title":"[프로그래머스] 입국심사 - 이진탐색 알고리즘 / Python","date":"2020.06.17","emoji":"🔍","category":"algorithm"}}}]}}}