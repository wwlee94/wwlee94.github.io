{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/competition/2018-kakao/cache/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"0fd1add8-a09c-587b-87e8-a0c0e453b313","excerpt":"LEVEL 2 - ‘캐시’ 문제 보러 가기 ! https://programmers.co.kr/learn/courses/30/lessons/17680 프로그래머스 캐시 문제를 풀기 전에 ! LRU 페이지 교체 알고리즘을 우선적으로 이해해야 합니다. LRU(Least Recently…","html":"<div class=\"custom-block info\"><div class=\"custom-block-heading\">LEVEL 2 - ‘캐시’ 문제 보러 가기 !</div><div class=\"custom-block-body\"><p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/17680\">https://programmers.co.kr/learn/courses/30/lessons/17680</a></p></div></div>\n<h2 id=\"프로그래머스-캐시-문제를-풀기-전에-\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%BA%90%EC%8B%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%92%80%EA%B8%B0-%EC%A0%84%EC%97%90-\" aria-label=\"프로그래머스 캐시 문제를 풀기 전에  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래머스 캐시 문제를 풀기 전에 !</h2>\n<p>LRU 페이지 교체 알고리즘을 우선적으로 이해해야 합니다.</p>\n<h4 id=\"lruleast-recently-used-페이지-교체-알고리즘이란\" style=\"position:relative;\"><a href=\"#lruleast-recently-used-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"lruleast recently used 페이지 교체 알고리즘이란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LRU(Least Recently Used) 페이지 교체 알고리즘이란?</h4>\n<p>캐시가 사용하는 <code class=\"language-text\">리소스의 양은 제한</code>되어 있으니, 캐시는 제한된 리소스 내에서 데이터를 <code class=\"language-text\">빠르게 데이터를 가져오기 위한 알고리즘</code>입니다.</p>\n<h4 id=\"lru-알고리즘은-어떤-방식-\" style=\"position:relative;\"><a href=\"#lru-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%80-%EC%96%B4%EB%96%A4-%EB%B0%A9%EC%8B%9D-\" aria-label=\"lru 알고리즘은 어떤 방식  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LRU 알고리즘은 어떤 방식 ?</h4>\n<p><code class=\"language-text\">LRU 알고리즘</code>은 메모리 상에서 가장 최근에 사용된 적이 없는 캐시의 메모리부터 대체하며 새로운 데이터로 갱신합니다.</p>\n<blockquote>\n<p>즉, ‘자주 불린 데이터가 미래에도 더 자주 불릴 것’이라는 개념에서 나온 알고리즘</p>\n</blockquote>\n<h4 id=\"lru-알고리즘의-동작-과정\" style=\"position:relative;\"><a href=\"#lru-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\" aria-label=\"lru 알고리즘의 동작 과정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LRU 알고리즘의 동작 과정</h4>\n<ol>\n<li>만약 현재 가져오고 싶은 데이터가 캐시에 존재하면 캐시에서 데이터를 가져온 후 다시 캐시 큐의 가장 뒷 부분에 데이터 삽입</li>\n<li>만약 데이터가 캐시에 존재하지 않으면 저장소에서 데이터를 가져온 후 가져온 데이터를 캐시에 삽입</li>\n<li>캐시가 꽉 차있다면 사용이 가장 적었던 큐의 가장 앞부분을 제거하고 가져오려는 데이터를 캐시 큐의 가장 뒷 부분에 데이터 삽입</li>\n</ol>\n<h2 id=\"문제-접근-방식\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\" aria-label=\"문제 접근 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 접근 방식</h2>\n<p>프로그래머스의 <code class=\"language-text\">캐시</code> 알고리즘 문제 또한 위의 <code class=\"language-text\">LRU 알고리즘</code>을 적용하면 쉽게 풀 수 있습니다.</p>\n<ul>\n<li>단, 소문자, 대문자를 구분하지 않으므로 받은 문자열은 전부 소문자로 바꾸어 문제를 풀어야합니다.</li>\n</ul>\n<h2 id=\"풀이-코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\" aria-label=\"풀이 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 코드</h2>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>cacheSize<span class=\"token punctuation\">,</span> cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    caches <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> city <span class=\"token keyword\">in</span> cities<span class=\"token punctuation\">:</span>\n        city <span class=\"token operator\">=</span> city<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># cache hit</span>\n        <span class=\"token keyword\">if</span> city <span class=\"token keyword\">in</span> caches<span class=\"token punctuation\">:</span>\n            caches<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n            caches<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># cache miss</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cacheSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 최근 사용하지 않은 캐시 업데이트</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> cacheSize<span class=\"token punctuation\">:</span>\n                caches<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            caches<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/algorithm/competition/2018-kakao/cache/#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%BA%90%EC%8B%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%92%80%EA%B8%B0-%EC%A0%84%EC%97%90-\">프로그래머스 캐시 문제를 풀기 전에 !</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/algorithm/competition/2018-kakao/cache/#lruleast-recently-used-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\">LRU(Least Recently Used) 페이지 교체 알고리즘이란?</a></li>\n<li><a href=\"/category/algorithm/competition/2018-kakao/cache/#lru-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%80-%EC%96%B4%EB%96%A4-%EB%B0%A9%EC%8B%9D-\">LRU 알고리즘은 어떤 방식 ?</a></li>\n<li><a href=\"/category/algorithm/competition/2018-kakao/cache/#lru-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95\">LRU 알고리즘의 동작 과정</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/algorithm/competition/2018-kakao/cache/#%EB%AC%B8%EC%A0%9C-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D\">문제 접근 방식</a></li>\n<li><a href=\"/category/algorithm/competition/2018-kakao/cache/#%ED%92%80%EC%9D%B4-%EC%BD%94%EB%93%9C\">풀이 코드</a></li>\n</ul>","frontmatter":{"title":"[프로그래머스] [1차] 2018 카카오 - 캐시 / Python","description":"","date":"2020.05.30","emoji":"📚","category":"algorithm"}}},"pageContext":{"slug":"/category/algorithm/competition/2018-kakao/cache/","relatedPosts":[{"node":{"fields":{"slug":"/category/algorithm/bfs-dfs/target-number/"},"frontmatter":{"title":"[프로그래머스] DFS & BFS - 타겟 넘버 / Python","date":"2020.08.25","emoji":"🔢","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/dp/long-run/"},"frontmatter":{"title":"[프로그래머스] DP - 멀리 뛰기 / Python","date":"2020.08.15","emoji":"🏃🏻‍♂️","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/dp/school-road/"},"frontmatter":{"title":"[프로그래머스] DP - 등굣길 / Python","date":"2020.07.18","emoji":"🚌","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/brute-force-search/find-prime-numbers/"},"frontmatter":{"title":"[프로그래머스] 완전탐색 - 소수 찾기 / Python","date":"2020.07.14","emoji":"🔍","category":"algorithm"}}},{"node":{"fields":{"slug":"/category/algorithm/hash/camouflage/"},"frontmatter":{"title":"[프로그래머스] 해시 - 위장 / Python","date":"2020.07.12","emoji":"🌫","category":"algorithm"}}}]}}}