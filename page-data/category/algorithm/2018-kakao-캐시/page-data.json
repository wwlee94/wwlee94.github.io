{"componentChunkName":"component---src-templates-post-tsx","path":"/category/algorithm/2018-kakao-캐시/","webpackCompilationHash":"9ee75c71fb1da5ee1a15","result":{"data":{"site":{"siteMetadata":{"title":"Weekend.dev","author":"Weekend.dev","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"1192d87d-5549-55cc-ada1-5dfb0a88b0be","excerpt":"프로그래머스 캐시 문제를 풀기 전에 ! LRU 페이지 교체 알고리즘을 우선적으로 이해해야 합니다. LRU(Least Recently Used) 페이지 교체 알고리즘이란? 캐시가 사용하는 되어 있으니, 캐시는 제한된 리소스 내에서 데이터를 입니다. LRU…","html":"<h2>프로그래머스 캐시 문제를 풀기 전에 !</h2>\n<p>LRU 페이지 교체 알고리즘을 우선적으로 이해해야 합니다.</p>\n<h4>LRU(Least Recently Used) 페이지 교체 알고리즘이란?</h4>\n<p>캐시가 사용하는 <code class=\"language-text\">리소스의 양은 제한</code>되어 있으니, 캐시는 제한된 리소스 내에서 데이터를 <code class=\"language-text\">빠르게 데이터를 가져오기 위한 알고리즘</code>입니다.</p>\n<h4>LRU 알고리즘은 어떤 방식 ?</h4>\n<p><code class=\"language-text\">LRU 알고리즘</code>은 메모리 상에서 가장 최근에 사용된 적이 없는 캐시의 메모리부터 대체하며 새로운 데이터로 갱신합니다.</p>\n<blockquote>\n<p>즉, ‘자주 불린 데이터가 미래에도 더 자주 불릴 것’이라는 개념에서 나온 알고리즘</p>\n</blockquote>\n<h4>LRU 알고리즘의 동작 과정</h4>\n<ol>\n<li>만약 현재 가져오고 싶은 데이터가 캐시에 존재하면 캐시에서 데이터를 가져온 후 다시 캐시 큐의 가장 뒷 부분에 데이터 삽입</li>\n<li>만약 데이터가 캐시에 존재하지 않으면 저장소에서 데이터를 가져온 후 가져온 데이터를 캐시에 삽입</li>\n<li>캐시가 꽉 차있다면 사용이 가장 적었던 큐의 가장 앞부분을 제거하고 가져오려는 데이터를 캐시 큐의 가장 뒷 부분에 데이터 삽입</li>\n</ol>\n<h2>문제 풀이 접근</h2>\n<p>프로그래머스의 <code class=\"language-text\">캐시</code> 알고리즘 문제 또한 위의 <code class=\"language-text\">LRU 알고리즘</code>을 적용하면 쉽게 풀 수 있습니다.</p>\n<ul>\n<li>단, 소문자, 대문자를 구분하지 않으므로 받은 문자열은 전부 소문자로 바꾸어 문제를 풀어야합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>cacheSize<span class=\"token punctuation\">,</span> cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  caches <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> city <span class=\"token keyword\">in</span> cities<span class=\"token punctuation\">:</span>\n      city <span class=\"token operator\">=</span> city<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\"># cache hit</span>\n      <span class=\"token keyword\">if</span> city <span class=\"token keyword\">in</span> caches<span class=\"token punctuation\">:</span>\n          caches<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n          caches<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n          answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      <span class=\"token comment\"># cache miss</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">if</span> cacheSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">return</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span>\n          <span class=\"token comment\"># 최근 사용하지 않은 캐시 업데이트</span>\n          <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> cacheSize<span class=\"token punctuation\">:</span>\n              caches<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          caches<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n          answer <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\n  <span class=\"token keyword\">return</span> answer</code></pre></div>\n<p>문제 보기 : <a href=\"https://programmers.co.kr/learn/courses/30/lessons/17680\">https://programmers.co.kr/learn/courses/30/lessons/17680</a></p>","frontmatter":{"title":"[프로그래머스] 캐시 - [1차] 2018 카카오 / Python","description":"","date":"2020.05.30","emoji":"📚","category":"algorithm"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/category/algorithm/2018-kakao-캐시/","relatedPosts":[]}}}