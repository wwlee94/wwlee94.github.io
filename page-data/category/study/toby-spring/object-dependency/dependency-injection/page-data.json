{"componentChunkName":"component---src-templates-post-tsx","path":"/category/study/toby-spring/object-dependency/dependency-injection/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"02197239-5886-5f00-a5d0-94d12fa427b0","excerpt":"의존관계 주입(DI) 제어의 역전(IoC)과 의존관계 주입(DI) IoC 는 매우 폭 넓게 사용되는 용어이고 스프링이 제공하는 IoC 동작 방식을 구체화하면 이 더 명확합니다. DI…","html":"<h2 id=\"의존관계-주입di\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85di\" aria-label=\"의존관계 주입di permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존관계 주입(DI)</h2>\n<h4 id=\"제어의-역전ioc과-의존관계-주입di\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84ioc%EA%B3%BC-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85di\" aria-label=\"제어의 역전ioc과 의존관계 주입di permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어의 역전(IoC)과 의존관계 주입(DI)</h4>\n<p>IoC 는 매우 폭 넓게 사용되는 용어이고 스프링이 제공하는 IoC 동작 방식을 구체화하면 <code class=\"language-text\">의존관계 주입(DI)</code>이 더 명확합니다.</p>\n<p>DI는 오브젝트를 오브젝트에 주입하는 동작이 아닌 <code class=\"language-text\">오브젝트 레퍼런스를 외부로부터</code> 제공받는 것입니다.</p>\n<h4 id=\"런타임-의존관계-설정\" style=\"position:relative;\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%84%A4%EC%A0%95\" aria-label=\"런타임 의존관계 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타임 의존관계 설정</h4>\n<p><strong>의존 관계란 ?</strong></p>\n<p><code class=\"language-text\">A -&gt; B</code> 라는 관계에서 A는 B에 의존한다고 말합니다.</p>\n<p>즉, B가 변하면 A에 영향을 미치는 관계일 때 의존한다고 합니다.</p>\n<p>반대로, ‘B는 A에 의존하지 않는다’도 맞는 말입니다.</p>\n<p><strong>의존 관계의 조건</strong></p>\n<p>책에서는 이러한 <code class=\"language-text\">직접적인 의존 관계</code>를 없애려고 노력합니다.</p>\n<p>요구사항이 바뀔 때마다, 업데이트 될 때마다 <code class=\"language-text\">서로가 서로에게 영향</code>을 주기 때문에 비용이 큽니다.<br>\n(결합도가 높음)</p>\n<p>따라서, 의존관계 주입은 다음과 같은 조건을 만족해야합니다.</p>\n<ol>\n<li>\n<p>코드에는 런타임 시점의 의존관계가 드러나지 않아야합니다.</p>\n<ul>\n<li>즉, <code class=\"language-text\">인터페이스</code>에만 의존하고 있어야합니다.</li>\n</ul>\n</li>\n<li>런타임 시점의 의존관계는 컨테이너 or 팩토리 같은 <code class=\"language-text\">제 3의 존재</code>가 결정합니다.</li>\n<li>의존관계는 사용할 오브젝트의 레퍼런스를 주입해줌으로써 만들어집니다.</li>\n</ol>\n<p><code class=\"language-text\">DI</code>는 자신이 사용할 오브젝트에 대한 선택과 생성을 외부로 넘기고 자신은 수동적으로 주입받는 오브젝트를 사용한다는 점에서 IoC 개념과 잘 들어맞는다.</p>\n<h4 id=\"di의-장점\" style=\"position:relative;\"><a href=\"#di%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"di의 장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI의 장점</h4>\n<ul>\n<li>\n<p>인터페이스를 통해 <code class=\"language-text\">결합도가 낮은</code> 코드를 만들 수 있습니다.</p>\n<ul>\n<li>결합도가 낮은 코드는 <code class=\"language-text\">변경을 통한 확장에 자유롭다</code>는 장점을 가져옵니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">관심사의 분리(SoC)</code>를 통해 얻어지는 <code class=\"language-text\">높은 응집도</code>를 가질 수 있습니다.</p>\n<ul>\n<li>높은 응집도는 <code class=\"language-text\">서로 독립적으로 작용</code>한다는 의미이므로 유지보수 비용이 낮아집니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"메소드를-통한-의존관계-주입\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85\" aria-label=\"메소드를 통한 의존관계 주입 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드를 통한 의존관계 주입</h4>\n<p><strong>DI의 조건</strong></p>\n<p>DI를 위해서는 주입되는 오브젝트와 주입받는 오브젝트 양쪽 모두 스프링 빈으로 등록되어야합니다.<br>\n스프링이 생성하고 관리하는 IoC 대상이어야 DI에 참여할 수 있기 때문입니다.</p>\n<p>보통 DI 해주는 3가지 방법이 있습니다.</p>\n<ol>\n<li>생성자 메소드를 이용한 주입</li>\n<li>수정자 메소드(Setter)를 이용한 주입</li>\n<li>\n<p>일반 메소드를 이용한 주입</p>\n<blockquote>\n<p>한 번에 여러개 파라미터를 받거나 하는 장점</p>\n</blockquote>\n</li>\n</ol>\n<p>책에서는 XML과 수정자 메서드를 자주 사용한다고 되어 있으나 최근 <code class=\"language-text\">XML</code>보다는 <code class=\"language-text\">JavaConfig</code>가 자주 사용됩니다.</p>\n<p>또한, 객체를 <code class=\"language-text\">immutable</code> 하도록(변경이 필요한 것 제외하고는) 프로그래밍을 하는 것이 좋고 생성자 메소드를 사용하면 다음과 같은 이점이 있습니다.</p>\n<ol>\n<li><code class=\"language-text\">null</code> 을 주입하지 않는 한 <code class=\"language-text\">NullPointerException</code> 은 발생하지 않습니다.</li>\n<li>의존관계에 대한 내용을 외부로 노출시킴으로써 <code class=\"language-text\">컴파일 타임에 오류</code>를 잡아낼 수 있습니다.</li>\n</ol>\n<p>참고 링크 : <a href=\"https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad\">https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad</a></p>\n<h2 id=\"di-설정\" style=\"position:relative;\"><a href=\"#di-%EC%84%A4%EC%A0%95\" aria-label=\"di 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI 설정</h2>\n<p><code class=\"language-text\">Spring Boot</code>로 개발을 많이 진행하면서, 또 몇가지 이유 등으로 <code class=\"language-text\">XML</code> 파일 설정은 최근 잘 사용되지 않으니 해당 포스팅은 참고용으로 보시길 바랍니다. !</p>\n<p><strong>JavaConfig의 이점</strong></p>\n<p>참고 링크 : <a href=\"https://stackoverflow.com/questions/29162278/benefits-of-javaconfig-over-xml-configurations-in-spring\">https://stackoverflow.com/questions/29162278/benefits-of-javaconfig-over-xml-configurations-in-spring</a></p>\n<h2 id=\"xml을-이용한-di-설정\" style=\"position:relative;\"><a href=\"#xml%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-di-%EC%84%A4%EC%A0%95\" aria-label=\"xml을 이용한 di 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML을 이용한 DI 설정</h2>\n<p><strong>클래스 설정과 XML 설정의 대응 항목</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">자바 코드 설정 정보</th>\n<th align=\"left\">XML 설정 정보</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">빈 설정파일</td>\n<td align=\"left\">@Configuration</td>\n<td align=\"left\"><code class=\"language-text\">&lt;beans&gt;</code></td>\n</tr>\n<tr>\n<td align=\"left\">빈의 이름</td>\n<td align=\"left\">@Bean methodName()</td>\n<td align=\"left\"><code class=\"language-text\">&lt;bean id=&quot;methodName&quot;&gt;</code></td>\n</tr>\n<tr>\n<td align=\"left\">빈의 클래스</td>\n<td align=\"left\">return new BeanClass()</td>\n<td align=\"left\"><code class=\"language-text\">class=&quot;BeanClass&quot;&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>또한, XML에서는 <code class=\"language-text\">&lt;property&gt;</code> 태그를 사용해 의존 오브젝트와의 관계를 정의합니다.</p>\n<p><code class=\"language-text\">&lt;property&gt;</code> 태그는 name과 ref 라는 두 개의 애트리뷰트를 갖습니다.</p>\n<ul>\n<li>\n<p><strong>name</strong></p>\n<ul>\n<li>수정자 메소드의 프로퍼티의 이름</li>\n</ul>\n</li>\n<li>\n<p><strong>ref</strong></p>\n<ul>\n<li>수정자 메소드를 통해 주입해줄 오브젝트의 빈 ID</li>\n</ul>\n</li>\n</ul>\n<p><strong>예시)</strong></p>\n<p>JAVA</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoFactory</span><span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token class-name\">ConnectionMaker</span> <span class=\"token function\">myConnectionMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DConnectionMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Bean</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDao</span> <span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">UserDao</span> userDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    userDao<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionMaker</span><span class=\"token punctuation\">(</span><span class=\"token function\">myConnectionMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> userDao<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>XML</p>\n<div class=\"gatsby-code-title\">XML</div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myConnectionMaker<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>springbook.user.dao.DConnectionMaker<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>springbook.dao.UserDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>connectionMaker<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myConnectionMaker<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"프로퍼티-값의-주입\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B0%92%EC%9D%98-%EC%A3%BC%EC%9E%85\" aria-label=\"프로퍼티 값의 주입 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 값의 주입</h4>\n<p><strong>값 주입</strong></p>\n<p>다른 오브젝트의 레퍼런스가 아닌 단순 정보도 수정자 메소드에 넣을 수 있습니다.</p>\n<p><strong>EX)</strong></p>\n<div class=\"gatsby-code-title\">XML</div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>spring<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>단, 여기서 모두 <code class=\"language-text\">String</code> 타입으로 주입되는 것이 스프링이 프로퍼티의 값을, 수정자 메소드의 파라미터 타입을 참고로 해서 적절한 형태로 변환 시켜줍니다.</p>\n<blockquote>\n<p>Integer, Double, String, Boolean 기본 타입 + Class, URL, File 같은 오브젝트 + List, Map, Set 등으로도 값의 주입이 가능합니다.</p>\n</blockquote>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85di\">의존관계 주입(DI)</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84ioc%EA%B3%BC-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85di\">제어의 역전(IoC)과 의존관계 주입(DI)</a></li>\n<li><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#%EB%9F%B0%ED%83%80%EC%9E%84-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%84%A4%EC%A0%95\">런타임 의존관계 설정</a></li>\n<li><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#di%EC%9D%98-%EC%9E%A5%EC%A0%90\">DI의 장점</a></li>\n<li><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85\">메소드를 통한 의존관계 주입</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#di-%EC%84%A4%EC%A0%95\">DI 설정</a></li>\n<li>\n<p><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#xml%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-di-%EC%84%A4%EC%A0%95\">XML을 이용한 DI 설정</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/toby-spring/object-dependency/dependency-injection/#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B0%92%EC%9D%98-%EC%A3%BC%EC%9E%85\">프로퍼티 값의 주입</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[토비의 스프링] 1. 오브젝트와 의존관계 - 의존관계 주입(DI)","description":"의존관계 주입(DI)에 대하여","date":"2020.06.13","emoji":"📥","category":"study"}}},"pageContext":{"slug":"/category/study/toby-spring/object-dependency/dependency-injection/","relatedPosts":[{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter3-persistence-context/"},"frontmatter":{"title":"[JPA 프로그래밍] 3. 영속성 관리","date":"2020.10.18","emoji":"⏰","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter2-jpa-start/"},"frontmatter":{"title":"[JPA 프로그래밍] 2. JPA 시작","date":"2020.10.12","emoji":"🚥","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter1-jpa-introduction/"},"frontmatter":{"title":"[JPA 프로그래밍] 1. JPA 소개","date":"2020.10.05","emoji":"🙌🏻","category":"study"}}},{"node":{"fields":{"slug":"/category/study/toby-spring/spring-core-technology/"},"frontmatter":{"title":"[토비의 스프링] 7. 스프링 핵심 기술의 응용","date":"2020.07.24","emoji":"🌟","category":"study"}}},{"node":{"fields":{"slug":"/category/study/toby-spring/aop/transaction-property/"},"frontmatter":{"title":"[토비의 스프링] 6-3. AOP - 트랜잭션 속성","date":"2020.07.20","emoji":"🧩","category":"study"}}}]}}}