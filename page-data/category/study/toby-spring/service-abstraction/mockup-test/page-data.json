{"componentChunkName":"component---src-templates-post-tsx","path":"/category/study/toby-spring/service-abstraction/mockup-test/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"eb4d3d5f-b9eb-55d7-bde2-a7cf50c99b07","excerpt":"개요 지난 포스팅에서는 추상화 기법을 통해서 특정 기술 환경(DBMS의 종류에 상관 없이, 여러 DBMS…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>지난 포스팅에서는 추상화 기법을 통해서 특정 기술 환경(DBMS의 종류에 상관 없이, 여러 DBMS를 한번에 사용하던지 등)에 종속되지 않은 서비스 추상화에 대해서 알아보았습니다.</p>\n<p>이번 포스팅에서는 각자의 책임을 분리하는 <code class=\"language-text\">단일 책임 원칙</code>과 의존 관계에 종속되지 않은 테스트를 만들 수 있는 <code class=\"language-text\">테스트 추상화</code>에 대해 알아보겠습니다.</p>\n<h2 id=\"단일-책임-원칙\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99\" aria-label=\"단일 책임 원칙 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙</h2>\n<p>이전에 JDBC Connection을 UserService에서 직접 생성해서 사용하는 경우에는 사용자 레벨을 관리하는 <code class=\"language-text\">비즈니스 로직</code>과 <code class=\"language-text\">트랜잭션 관리</code> 두가지 책임을 가지고 있었습니다.</p>\n<p>하지만, 트랜잭션 서비스 추상화 방식을 도입하고 나서는 UserService에서는 비즈니스 로직만 담고 있기에 다른 코드에서 수정이나 문제가 발생했을 때 UserService의 코드는 수정하지 않아도 됩니다.</p>\n<h4 id=\"단일-책임-원칙의-장점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"단일 책임 원칙의 장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 책임 원칙의 장점</h4>\n<ul>\n<li>\n<p>어떤 수정사항이 발생할 경우 <code class=\"language-text\">수정할 대상</code>이 명확해집니다.</p>\n<ul>\n<li>DAO의 개수나 서비스 클래스가 많아질 수록 적절하게 책임과 관심을 분리하고, 서로 영향을 주지 않도록 다양한 추상화 기법을 적용하는 것이 단일 책임 원칙을 지키는 방법입니다.</li>\n</ul>\n</li>\n<li>많은 디자인 패턴이 적용되어야 가능하기 때문에 자연스럽게 습득이 가능합니다.</li>\n</ul>\n<p>이처럼, DI는 단일 책임 원칙을 지키는 가장 핵심적인 도구라고 이야기할 수 있습니다.</p>\n<p>단순히 런타임 오브젝트 DI 뿐만 아니라 자바 엔터프라이즈 기술의 많은 문제를 해결할 수 있으며 깔끔하고 유연한 코드를 만들 수 있습니다.</p>\n<h2 id=\"테스트-추상화\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"테스트 추상화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 추상화</h2>\n<p>테스트 환경을 만들어주기 위해 기존의 의존 오브젝트를 대체할 수 있도록 만든 오브젝트를 <code class=\"language-text\">테스트 대역</code>(test double)이라고 부릅니다.</p>\n<p><code class=\"language-text\">테스트 대역</code>을 세분화하면 다음과 같이 여러 카테고리로 분류됩니다.</p>\n<p><code class=\"language-text\">Dummy</code> - <code class=\"language-text\">Fake</code> - <code class=\"language-text\">Stub</code> - <code class=\"language-text\">Mock</code></p>\n<blockquote>\n<p>참고 : <a href=\"https://beomseok95.tistory.com/295\">https://beomseok95.tistory.com/295</a></p>\n</blockquote>\n<p>책에서는 <code class=\"language-text\">Stub</code>와 <code class=\"language-text\">Mock</code>에 대해서 설명해주고 있습니다.</p>\n<h4 id=\"stub-오브젝트\" style=\"position:relative;\"><a href=\"#stub-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"stub 오브젝트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stub 오브젝트</h4>\n<p>테스트가 정상적으로 수행될 수 있도록 의존 오브젝트에 간접적으로 입력을 제공해 테스트를 돕는 오브젝트입니다.</p>\n<p>인터페이스의 기능을 최소한으로 구현한 오브젝트입니다.</p>\n<blockquote>\n<p>이 책에서는 Dummy와 Stub의 구분을 짓지 않은 것 같습니다.</p>\n</blockquote>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DummyMailSender</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MailSender</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleMailMessage</span> mailMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MailException</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleMailMessage</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mailMessages<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MailException</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"mock-오브젝트\" style=\"position:relative;\"><a href=\"#mock-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"mock 오브젝트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock 오브젝트</h4>\n<p>스텁 오브젝트에서 출력값을 반환하게하여 의존 오브젝트 간에 일어나는 작업을 검증까지 가능하도록 만든 오브젝트입니다.</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MockMailSender</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MailSender</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> requests <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 모든 send가 끝난 후 이 메소드를 호출해서 잘 저장되었는지 검증할 수 있습니다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> requests<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleMailMessage</span> mailMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MailException</span> <span class=\"token punctuation\">{</span>\n        requests<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mailMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleMailMessage</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mailMessages<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MailException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>\n<p>비즈니스 로직을 담은 코드는 데이터 액세스 로직을 담은 코드와 깔끔하게 분리되어야 합니다.</p>\n<ul>\n<li>비즈니스 로직의 코드 안에서도 책임과 역할에 따라 깔끔하게 분리되어야 합니다.</li>\n</ul>\n</li>\n<li>DAO를 사용하는 비즈니스 로직에는 단위 작업을 보장해주는 트랜잭션(의 경계설정)이 필요합니다.</li>\n<li>스프링이 제공하는 트랜잭션 동기화 기법을 활용하자 !</li>\n<li>트랜잭션 서비스 추상화로 DI를 느슨하게 조절하자 !</li>\n<li>테스트 대상이 사용하는 ‘의존 오브젝트’를 대체하는 오브젝트를 ‘테스트 대역’이라 부릅니다.</li>\n<li>테스트 대역 중에서도 목 오브젝트는 테스트 ‘대상으로부터’ 전달받은 정보를 ‘검증’할 수 있도록 설계된 것을 말합니다.</li>\n</ul>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>오늘은 <code class=\"language-text\">단일 책임 원칙</code>과 <code class=\"language-text\">테스트 추상화</code>에 대해서 알아 보았습니다.</p>\n<p>다음 포스팅은 이 책에서 가장 큰 범위를 가진 <code class=\"language-text\">AOP</code>에 대해서 알아보겠습니다 !</p>","tableOfContents":"<ul>\n<li><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li>\n<p><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99\">단일 책임 원칙</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99%EC%9D%98-%EC%9E%A5%EC%A0%90\">단일 책임 원칙의 장점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%94%EC%83%81%ED%99%94\">테스트 추상화</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#stub-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">Stub 오브젝트</a></li>\n<li><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#mock-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">Mock 오브젝트</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/category/study/toby-spring/service-abstraction/mockup-test/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>","frontmatter":{"title":"[토비의 스프링] 5-2. 단일 책임 원칙과 테스트 추상화","description":"단일 책임 원칙과 테스트 추상화 (테스트 대역 - Mock 테스트)","date":"2020.07.07","emoji":"⚠️","category":"study"}}},"pageContext":{"slug":"/category/study/toby-spring/service-abstraction/mockup-test/","relatedPosts":[{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter4-entity-mapping/"},"frontmatter":{"title":"[JPA 프로그래밍] 4. 엔티티 매핑","date":"2020.10.22","emoji":"⛳️","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter3-persistence-context/"},"frontmatter":{"title":"[JPA 프로그래밍] 3. 영속성 관리","date":"2020.10.18","emoji":"⏰","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter2-jpa-start/"},"frontmatter":{"title":"[JPA 프로그래밍] 2. JPA 시작","date":"2020.10.12","emoji":"🚥","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter1-jpa-introduction/"},"frontmatter":{"title":"[JPA 프로그래밍] 1. JPA 소개","date":"2020.10.05","emoji":"🙌🏻","category":"study"}}},{"node":{"fields":{"slug":"/category/study/toby-spring/spring-core-technology/"},"frontmatter":{"title":"[토비의 스프링] 7. 스프링 핵심 기술의 응용","date":"2020.07.24","emoji":"🌟","category":"study"}}}]}}}