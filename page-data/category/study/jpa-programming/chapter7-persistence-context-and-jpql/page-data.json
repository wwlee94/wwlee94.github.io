{"componentChunkName":"component---src-templates-post-tsx","path":"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"78f2632f-26f1-54bd-877a-4260ce99de68","excerpt":"영속성 컨텍스트와 JPQL, 플러시 모드 먼저 한 번에 여러 데이터를 수정할 수 있는 벌크 연산에 대해 알아보고 JPQL과 영속성 컨텍스트, JPQL의 플러시 모드에 대해 알아보자 1. 벌크 연산 Update, Delete 벌크 연산 JPA…","html":"<h1 id=\"영속성-컨텍스트와-jpql-플러시-모드\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%99%80-jpql-%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C\" aria-label=\"영속성 컨텍스트와 jpql 플러시 모드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영속성 컨텍스트와 JPQL, 플러시 모드</h1>\n<p>먼저 한 번에 여러 데이터를 수정할 수 있는 벌크 연산에 대해 알아보고</p>\n<p>JPQL과 영속성 컨텍스트, JPQL의 플러시 모드에 대해 알아보자</p>\n<h2 id=\"1-벌크-연산\" style=\"position:relative;\"><a href=\"#1-%EB%B2%8C%ED%81%AC-%EC%97%B0%EC%82%B0\" aria-label=\"1 벌크 연산 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 벌크 연산</h2>\n<p><strong>Update, Delete 벌크 연산</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">String</span> qlString <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE Product p \"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"SET p.price = p.price * 1.1 \"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"WHERE p.stockAmount &lt; :stockAmount\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 또는 delete 쿼리</span>\n\n<span class=\"token keyword\">int</span> resultCount <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>qlString<span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stockAmount\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 벌크 연산</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>JPA 표준은 아니지만 하이버네이트는 <code class=\"language-text\">insert</code> 벌크 연산도 지원한다.</p>\n<h4 id=\"벌크-연산의-주의점\" style=\"position:relative;\"><a href=\"#%EB%B2%8C%ED%81%AC-%EC%97%B0%EC%82%B0%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"벌크 연산의 주의점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>벌크 연산의 주의점</h4>\n<p>벌크 연산이 영속성 컨텍스트를 무시하고 데이터베이스에 직접 쿼리한다는 점에 주의 !</p>\n<p>따라서, 엔티티를 조회 한 뒤 벌크 연산하고 해당 엔티티를 조회해보면 벌크 연산한 결과가 영속성 컨텍스트에 반영이 안되는 케이스가 발생함</p>\n<p>위와 같은 상황을 해결하는 방법 몇 가지를 소개</p>\n<ol>\n<li>\n<p><code class=\"language-text\">em.refresh()</code> 사용</p>\n<ul>\n<li>벌크 연산 수행 직후 호출</li>\n</ul>\n</li>\n<li>벌크 연산 먼저 실행</li>\n<li>\n<p>벌크 연산 수행 후 영속성 컨텍스트 초기화</p>\n<ul>\n<li><code class=\"language-text\">em.clear()</code></li>\n</ul>\n</li>\n</ol>\n<hr>\n<p><strong>1차 캐시와 2차 캐시</strong></p>\n<p>1차 캐시는 기본적으로 영속성 컨텍스트 범위의 캐시이다.</p>\n<p>그럼 2차 캐시는 뭐지?</p>\n<p>애플리케이션에서 공유하는 캐시를 JPA는 공유 캐시(Shared Cache)라 하는데 이를 2차 캐시라고 한다.</p>\n<blockquote>\n<p>애플리케이션을 종료할 때까지 캐시가 유지된다.</p>\n</blockquote>\n<p><strong>참고 사이트</strong></p>\n<ul>\n<li><a href=\"https://gunju-ko.github.io/jpa/2019/01/14/JPA-2%EC%B0%A8%EC%BA%90%EC%8B%9C.html\">JPA 캐시 by Gunju Ko</a></li>\n<li><a href=\"https://derekpark.tistory.com/96\">JPA 캐시 by 사용자 소확행개발자</a></li>\n</ul>\n<hr>\n<h2 id=\"2-영속성-컨텍스트와-jpql의-특징\" style=\"position:relative;\"><a href=\"#2-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%99%80-jpql%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"2 영속성 컨텍스트와 jpql의 특징 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 영속성 컨텍스트와 JPQL의 특징</h2>\n<h4 id=\"쿼리-후-영속-상태인-것과-아닌-것\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC-%ED%9B%84-%EC%98%81%EC%86%8D-%EC%83%81%ED%83%9C%EC%9D%B8-%EA%B2%83%EA%B3%BC-%EC%95%84%EB%8B%8C-%EA%B2%83\" aria-label=\"쿼리 후 영속 상태인 것과 아닌 것 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리 후 영속 상태인 것과 아닌 것</h4>\n<p>JPQL의 조회 대상은 엔티티, 임베디드 타입, 값 타입 같이 다양한 종류가 있음</p>\n<p>JPQL는 조회한 엔티티만 영속성 컨텍스트에서 관리함 !</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> m <span class=\"token keyword\">from</span> Member m <span class=\"token comment\">// 엔티티 조회</span>\n<span class=\"token keyword\">select</span> o<span class=\"token punctuation\">.</span>address <span class=\"token keyword\">from</span> <span class=\"token keyword\">Order</span> o <span class=\"token comment\">// 임베디드 타입 조회 (관리 X)</span>\n<span class=\"token keyword\">select</span> m<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>username <span class=\"token keyword\">from</span> Member m <span class=\"token comment\">// 단순 필드 조회 (관리 X)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"jpql로-조회한-엔티티와-영속성-컨텍스트\" style=\"position:relative;\"><a href=\"#jpql%EB%A1%9C-%EC%A1%B0%ED%9A%8C%ED%95%9C-%EC%97%94%ED%8B%B0%ED%8B%B0%EC%99%80-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"jpql로 조회한 엔티티와 영속성 컨텍스트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPQL로 조회한 엔티티와 영속성 컨텍스트</h4>\n<p>JPQL의 특징</p>\n<ul>\n<li>JPQL은 항상 데이터베이스를 조회</li>\n<li>JPQL로 조회한 엔티티는 영속 상태</li>\n<li>\n<p>영속성 컨텍스트에 이미 존재하는 엔티티가 있으면 기존 엔티티를 사용 !</p>\n<ul>\n<li>\n<p>영속성 컨텍스트는 영속 상태인 엔티티의 동일성을 보장하기 때문</p>\n<blockquote>\n<p>JPQL 쿼리 실행 전 <code class=\"language-text\">flush()</code> 작업이라든지</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>참고 사이트</strong></p>\n<ul>\n<li><a href=\"https://cheese10yun.github.io/jpa-persistent-context/\">JPA 영속성 컨텍스트 주의점 by Yun on</a></li>\n</ul>\n<h2 id=\"3-jpql과-플러시-모드\" style=\"position:relative;\"><a href=\"#3-jpql%EA%B3%BC-%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C\" aria-label=\"3 jpql과 플러시 모드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. JPQL과 플러시 모드</h2>\n<p><code class=\"language-text\">flush</code>는 영속성 컨텍스트의 변경 내역을 데이터베이스와 동기화하는 작업 !</p>\n<p>보통 트랜잭션 커밋 이후 자동으로 flush가 호출되나 플러스 모드(FlushMode) 설정으로 커스텀 가능</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\">em<span class=\"token punctuation\">.</span><span class=\"token function\">setFlushMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FlushModeType</span><span class=\"token punctuation\">.</span>AUTO<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 커밋 또는 쿼리 실행 시 플러시 (default)</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">setFlushMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FlushModeType</span><span class=\"token punctuation\">.</span>COMMIT<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 커밋시에만 플러시</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">FlushModeType.COMMIT</code>은 성능 최적화를 위해 필요한 옵션 !</p>\n<h4 id=\"쿼리와-플러시-모드\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC%EC%99%80-%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C\" aria-label=\"쿼리와 플러시 모드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리와 플러시 모드</h4>\n<p><code class=\"language-text\">FlushModeType.COMMIT</code>를 사용할 때는 주의 해야함 !</p>\n<p>잘못 사용하면 다음과 같은 상황이 발생할 수 있음</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// 가격 1000 -> 2000 변경</span>\nproduct<span class=\"token punctuation\">.</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Product</span> product2 <span class=\"token operator\">=</span>\n   em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select p from Product p where p.price = 2000\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">AUTO</code> 상태라면 쿼리 실행전 플러시 하기 때문에 Product 2000의 가격이 DB에 반영되어 select 가능</p>\n<p><code class=\"language-text\">COMMIT</code> 상태라면 쿼리시에는 플러시하지 않으므로 DB에 반영이 안되서 위의 Product 엔티티는 조회 안됨</p>\n<blockquote>\n<p>해결 방법 : 직접 em.flush() 호출 하거나 AUTO로 변경</p>\n</blockquote>\n<h4 id=\"플러시-모드와-최적화\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C%EC%99%80-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"플러시 모드와 최적화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플러시 모드와 최적화</h4>\n<p><code class=\"language-text\">FlushModeType.COMMIT</code> 모드는 잘못하면 데이터 무결성에 심각한 피해를 줄 수 있다.</p>\n<p><code class=\"language-text\">그럼에도 불구하고</code> 플러시가 너무 자주 일어나는 상황에서 이 모드를 사용하면 플러시 횟수를 줄여서 <code class=\"language-text\">성능을 최적화</code> 할 수 있다 !</p>\n<p><strong>비즈니스 로직</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\">등록<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n쿼리<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 플러시</span>\n등록<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n쿼리<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 플러시</span>\n등록<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n쿼리<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 플러시</span>\n커밋<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 플러시</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>결국 앞의 수정 -> 조회 예제와 다를바 없이 무결성에 문제가 되는 예제지만 성능 최적화를 위해 감수하는 것 -?</p>\n</blockquote>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p>Tip) 하이버네이트 배치 쿼리 설정</p>\n<ul>\n<li><a href=\"https://woowabros.github.io/experience/2020/09/23/hibernate-batch.html\">https://woowabros.github.io/experience/2020/09/23/hibernate-batch.html</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%99%80-jpql-%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C\">영속성 컨텍스트와 JPQL, 플러시 모드</a></p>\n<ul>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#1-%EB%B2%8C%ED%81%AC-%EC%97%B0%EC%82%B0\">1. 벌크 연산</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#%EB%B2%8C%ED%81%AC-%EC%97%B0%EC%82%B0%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\">벌크 연산의 주의점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#2-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%99%80-jpql%EC%9D%98-%ED%8A%B9%EC%A7%95\">2. 영속성 컨텍스트와 JPQL의 특징</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#%EC%BF%BC%EB%A6%AC-%ED%9B%84-%EC%98%81%EC%86%8D-%EC%83%81%ED%83%9C%EC%9D%B8-%EA%B2%83%EA%B3%BC-%EC%95%84%EB%8B%8C-%EA%B2%83\">쿼리 후 영속 상태인 것과 아닌 것</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#jpql%EB%A1%9C-%EC%A1%B0%ED%9A%8C%ED%95%9C-%EC%97%94%ED%8B%B0%ED%8B%B0%EC%99%80-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\">JPQL로 조회한 엔티티와 영속성 컨텍스트</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#3-jpql%EA%B3%BC-%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C\">3. JPQL과 플러시 모드</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#%EC%BF%BC%EB%A6%AC%EC%99%80-%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C\">쿼리와 플러시 모드</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#%ED%94%8C%EB%9F%AC%EC%8B%9C-%EB%AA%A8%EB%93%9C%EC%99%80-%EC%B5%9C%EC%A0%81%ED%99%94\">플러시 모드와 최적화</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[JPA 프로그래밍] 7. 영속성 컨텍스트와 JPQL","description":"","date":"2020.11.11","emoji":"📦","category":"study"}}},"pageContext":{"slug":"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/","relatedPosts":[{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter6-object-oriented-query-language/"},"frontmatter":{"title":"[JPA 프로그래밍] 6. 객체지향 쿼리 언어","date":"2020.11.04","emoji":"📝","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter5-relationship-mapping/"},"frontmatter":{"title":"[JPA 프로그래밍] 5. 연관 관계 매핑","date":"2020.10.27","emoji":"🤼‍♂️","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter4-entity-mapping/"},"frontmatter":{"title":"[JPA 프로그래밍] 4. 엔티티 매핑","date":"2020.10.22","emoji":"⛳️","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter3-persistence-context/"},"frontmatter":{"title":"[JPA 프로그래밍] 3. 영속성 관리","date":"2020.10.18","emoji":"⏰","category":"study"}}}]}}}