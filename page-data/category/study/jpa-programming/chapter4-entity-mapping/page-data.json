{"componentChunkName":"component---src-templates-post-tsx","path":"/category/study/jpa-programming/chapter4-entity-mapping/","result":{"data":{"site":{"siteMetadata":{"title":"Blausee 기술 블로그","author":"wwlee94","siteUrl":"https://wwlee94.github.io"}},"markdownRemark":{"id":"c57d6efb-4d08-5a18-a21c-fcdaabcc8007","excerpt":"개요 JPA가 지원하는 다양한 매핑 어노테이션의 종류 4가지 객체와 테이블 매핑 : @Entity, @Table 기본 키 매핑 : @Id 필드와 컬럼 매핑 : @Column 연관관계 매핑 : @ManyToOne, @JoinColumn 이번…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>JPA가 지원하는 다양한 매핑 어노테이션의 종류 4가지</p>\n<ul>\n<li>객체와 테이블 매핑 : @Entity, @Table</li>\n<li>기본 키 매핑 : @Id</li>\n<li>필드와 컬럼 매핑 : @Column</li>\n<li>연관관계 매핑 : @ManyToOne, @JoinColumn</li>\n</ul>\n<p>이번 4장에서 <code class=\"language-text\">학습할 내용</code>은 다음과 같습니다.</p>\n<ul>\n<li>객체와 테이블 매핑</li>\n<li>필드와 컬럼 매핑</li>\n<li>데이터베이스 스키마 자동 생성 기능</li>\n<li>\n<p>기본 키 매핑 &#x26; 매핑 전략</p>\n<ul>\n<li>SEQUENCE, IDENTITY, TABLE</li>\n</ul>\n</li>\n</ul>\n<p>연관 관계 매핑은 5장에서 !</p>\n<h2 id=\"1-entity\" style=\"position:relative;\"><a href=\"#1-entity\" aria-label=\"1 entity permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. @Entity</h2>\n<blockquote>\n<p>JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 어노테이션을 필수로 붙여야 함!<br>\n@Entity가 붙은 클래스는 JPA가 관리하는 것으로 <code class=\"language-text\">엔티티</code>라고 부름</p>\n</blockquote>\n<h4 id=\"entity-적용-시-주의사항\" style=\"position:relative;\"><a href=\"#entity-%EC%A0%81%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"entity 적용 시 주의사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Entity 적용 시 주의사항</h4>\n<ul>\n<li>\n<p>기본 생성자는 필수 (public or protected)</p>\n<ul>\n<li>JPA는 엔티티를 생성할 때 기본 생성자를 사용하기 때문</li>\n</ul>\n</li>\n<li>final 클래스, final 필드, enum, interface, inner 클래스에는 사용할 수 없음</li>\n</ul>\n<p><em>자바는 생성자가 하나도 없으면 기본 생성자를 자동으로 만들어주지만, 있으면 생성해주지 않음 !</em></p>\n<h4 id=\"추가-lombok-사용-시-주의사항\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-lombok-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"추가 lombok 사용 시 주의사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가) Lombok 사용 시 주의사항</h4>\n<p><code class=\"language-text\">Lombok</code>의 <code class=\"language-text\">@Builder</code> 기능을 이용하려고 <code class=\"language-text\">@AllArgsConstructor</code>를 추가했을 때 에러</p>\n<p><strong>에러</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Builder</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필드 매핑</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">@NoArgsConstructor</code> 를 붙여줘야 정상 동작함</p>\n<ul>\n<li>\n<p>아래의 주의사항에 해당되는 이슈였음</p>\n<blockquote>\n<p>자바는 생성자가 하나도 없으면 기본 생성자를 자동으로 만들어주지만, 있으면 생성해주지 않는다.</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>OK</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Builder</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필드 매핑</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"2-table\" style=\"position:relative;\"><a href=\"#2-table\" aria-label=\"2 table permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. @Table</h2>\n<p>@Table 은 엔티티와 매핑할 테이블을 지정함 (생략 가능)</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"3-데이터-베이스-스키마-자동-생성\" style=\"position:relative;\"><a href=\"#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1\" aria-label=\"3 데이터 베이스 스키마 자동 생성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 데이터 베이스 스키마 자동 생성</h2>\n<p>일반적으로 테이블 설계 이후 엔티티를 매핑하는 방식을 사용할 수도 있지만 <code class=\"language-text\">JPA</code>는 데이터베이스 스키마 자동 생성 기능을 제공해줌 !</p>\n<ul>\n<li><code class=\"language-text\">JPA</code>는 클래스의 매핑 정보와 데이터베이스 방언을 사용해서 데이터베이스 스키마를 생성</li>\n</ul>\n<blockquote>\n<p>데이터베이스 방언(Dialect) ?<br>\nSQL 표준을 따르지 않은 각 데이터베이스의 고유한 기능</p>\n</blockquote>\n<p>다음과 같은 설정을하면 어플리케이션 실행 시점에 데이터베이스 테이블을 자동으로 생성</p>\n<div class=\"gatsby-code-title\">persistence.xml</div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hibernate.hbm2ddl.auto<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>콘솔에 실행되는 DDL을 출력한다.</p>\n<div class=\"gatsby-code-title\">persistence.xml</div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hibernate.show_sql<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Spring Boot에서 .yml 설정 파일</strong></p>\n<div class=\"gatsby-code-title\">application.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> update <span class=\"token comment\"># hbm2ddl의 바로가기</span>\n    <span class=\"token key atrule\">properties</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">dialect</span><span class=\"token punctuation\">:</span> org.hibernate.dialect.MySQL5InnoDBDialect <span class=\"token comment\"># MySQL logging</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>참고 링크 : <a href=\"https://zetawiki.com/wiki/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8_JPA_%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">스프링 JPA 프로퍼티</a></p>\n<h4 id=\"주의-사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"주의 사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의 사항</h4>\n<p>이러한 데이터베이스 스키마 자동 생성 기능은 개발자에게 테이블을 직접 생성하는 비용을 없애주지만, 자동 생성 기능이 만든 DDL은 <code class=\"language-text\">운영 환경</code>에서 사용할 만큼 완벽하지 않음</p>\n<p>따라서, 개발 환경에서 사용하거나 참고하는 용도로 이용하고 <code class=\"language-text\">운영 환경</code>에서는 사용하지 말자 !</p>\n<blockquote>\n<p>운영 시에는 개발자가 DB를 직접 설계하고 생성된 스키마에 엔티티를 매핑하자 !</p>\n</blockquote>\n<h2 id=\"4-ddl-생성-기능\" style=\"position:relative;\"><a href=\"#4-ddl-%EC%83%9D%EC%84%B1-%EA%B8%B0%EB%8A%A5\" aria-label=\"4 ddl 생성 기능 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. DDL 생성 기능</h2>\n<p>아래 처럼 제약 조건을 추가할 수도 있음</p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//추가</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><code class=\"language-text\">nullable = false</code> : not null 제약 조건 추가</li>\n<li><code class=\"language-text\">length = 10</code> : 크기를 지정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> MEMBER <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    ID <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n    NAME <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이러한 <code class=\"language-text\">DDL 생성 기능</code>은 단지 DDL을 자동으로 생성할 때만 사용되고, JPA 실행 로직에는 영향을 주지 않는다.</p>\n<h2 id=\"5-기본-키-매핑\" style=\"position:relative;\"><a href=\"#5-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EB%A7%A4%ED%95%91\" aria-label=\"5 기본 키 매핑 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 기본 키 매핑</h2>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>앞의 예제들은 @Id 어노테이션을 이용해서 회원의 기본키를 직접 할당하는 방식으로 진행되었음</p>\n<p>그렇다면, 직접 할당이 아닌 데이터 베이스에서 자동으로 생성된 키 값을 사용하려면 어떻게 매핑해야 할까?</p>\n<blockquote>\n<p>MySQL의 AUTO_INCREMENT 같은 기능<br>\nOracle의 시퀀스 오브젝트</p>\n</blockquote>\n<h4 id=\"기본-키-생성-전략-종류\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%83%9D%EC%84%B1-%EC%A0%84%EB%9E%B5-%EC%A2%85%EB%A5%98\" aria-label=\"기본 키 생성 전략 종류 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 키 생성 전략 종류</h4>\n<p>데이터 베이스마다 기본 키를 자동으로 생성하는 방식이 서로 다르므로 JPA는 다음과 같은 <code class=\"language-text\">기본 키 생성 전략</code>을 제공함</p>\n<ul>\n<li>직접 할당 : 기본 키를 어플리케이션에서 직접 할당</li>\n<li>\n<p>자동 생성 : 대리 키 사용 방식</p>\n<ul>\n<li><code class=\"language-text\">IDENTITY</code> : 기본 키 생성을 데이터베이스에 위임</li>\n<li><code class=\"language-text\">SEQUENCE</code> : 데이터베이스 시퀀스를 사용해 기본 키 할당</li>\n<li><code class=\"language-text\">TABLE</code> : 키 생성을 위한 테이블을 사용</li>\n</ul>\n</li>\n</ul>\n<p><strong>기본키 생성 방법</strong></p>\n<ul>\n<li>기본 키를 직접 할당 : @Id만 사용</li>\n<li>자동 생성 전략 사용 : @GeneratedValue 추가 및 키 생성 전략 선택.</li>\n</ul>\n<p><strong>키 생성 전략 사용을 위한 속성 추가</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hibernate.id.new_generator_mappings<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Spring Boot 에서 설정은 ?</strong></p>\n<p>위의 설정이 Spring Boot 2.0 버전부터 기본 값으로 <code class=\"language-text\">true</code>로 설정되어 동작함</p>\n<p><a href=\"https://www.popit.kr/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-2-0-jpa-auto-configuration%EC%9D%98-%EB%B3%80%ED%99%94/\">참고 링크</a></p>\n<h4 id=\"1-기본-키-직접-할당-전략\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%A7%81%EC%A0%91-%ED%95%A0%EB%8B%B9-%EC%A0%84%EB%9E%B5\" aria-label=\"1 기본 키 직접 할당 전략 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 기본 키 직접 할당 전략</h4>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// 기본 키 직접 할당</span>\n<span class=\"token annotation punctuation\">@Id</span>\n<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>기본 키 할당하는 방법</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">Board</span> board <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Board</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nboard<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//기본 키 직접 할당</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"2-identity-전략\" style=\"position:relative;\"><a href=\"#2-identity-%EC%A0%84%EB%9E%B5\" aria-label=\"2 identity 전략 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. IDENTITY 전략</h4>\n<p>IDENTITY는 기본 키 생성을 데이터 베이스에 위임하는 전략</p>\n<ul>\n<li>주로 <code class=\"language-text\">MySQL</code>, <code class=\"language-text\">PostgreSQL</code>, <code class=\"language-text\">SQL Server</code>, <code class=\"language-text\">DB2</code>, <code class=\"language-text\">H2</code>에서 사용.</li>\n</ul>\n<p><strong>MySQL의 AUTO_INCREMENT 기능 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> BOARD {\n    ID <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n}<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이후 ID 컬럼 비운 채로 저장 시 ID 자동으로 채워줌</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> BOARD<span class=\"token punctuation\">(</span><span class=\"token keyword\">DATA</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> BOARD<span class=\"token punctuation\">(</span><span class=\"token keyword\">DATA</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>매핑 코드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Board</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GenerateValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>IDENTITY 전략 핵심</strong></p>\n<ul>\n<li>\n<p>데이터베이스에 값을 저장하고 나서야 기본 키 값을 구할 수 있을 때 사용</p>\n<ul>\n<li>하이버네이트는 <code class=\"language-text\">Statement.getGeneratedKeys()</code> 를 사용해 저장하면서 동시에 기본 키를 가져옴 (원래는 DB와의 통신이 2번이지만 1번에 가능)</li>\n<li>가져온 기본 키를 엔티티의 식별자에 할당해 영속 상태로 변경</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">em.persist()</code> 호출시 INSERT SQL을 즉시 데이터베이스에 전달</p>\n<ul>\n<li>띠라서, <code class=\"language-text\">쓰기 지연</code>이 동작하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-sequence-전략\" style=\"position:relative;\"><a href=\"#3-sequence-%EC%A0%84%EB%9E%B5\" aria-label=\"3 sequence 전략 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. SEQUENCE 전략</h4>\n<p>유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트</p>\n<ul>\n<li>주로 <code class=\"language-text\">오라클</code>, <code class=\"language-text\">PostgreSQL</code>, <code class=\"language-text\">DB2</code>, <code class=\"language-text\">H2</code> 데이터베이스에서 사용.</li>\n</ul>\n<p><strong>시퀀스 생성 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> BOARD <span class=\"token punctuation\">(</span>\n    ID <span class=\"token keyword\">BIGINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 시퀀스 생성</span>\n<span class=\"token keyword\">CREATE</span> SEQUENCE BOARD_SEQ <span class=\"token keyword\">START</span> <span class=\"token keyword\">WITH</span> <span class=\"token number\">1</span> INCREMENT <span class=\"token keyword\">BY</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>매핑 코드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@SequenceGenerator</span><span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ_GENERATOR\"</span><span class=\"token punctuation\">,</span>\n    sequenceName <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ\"</span><span class=\"token punctuation\">,</span>\n    initialValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    allocationSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Board</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneraedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>SEQUENCE<span class=\"token punctuation\">,</span>\n                    generator <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ_GENERATOR\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>SEQUENCE 동작 과정</strong></p>\n<ol>\n<li>먼저 데이터베이스 시퀀스를 사용해서 식별자를 조회</li>\n<li>조회한 식별자를 엔티티에 할당한 후 엔티티를 영속성 컨텍스트에 저장 (영속 상태)</li>\n<li>\n<p>이상이 없으면 트랜잭션 커밋 -> 플러시</p>\n<ul>\n<li>데이터베이스에 저장됨</li>\n</ul>\n</li>\n</ol>\n<p>IDENTITY와의 가장 큰 차이점은 SEQUENCE는 먼저 엔티티를 조회한 이후 엔티티에 식별자를 할당함 (DB 콜 2번)</p>\n<hr>\n<p><strong>SEQUENCE 전략과 최적화</strong></p>\n<p>JPA는 시퀀스에 접근하는 횟수를 줄이기 위해 <code class=\"language-text\">@SequenceGenerator.allocationSize</code> 를 사용함</p>\n<p>예를 들어, allocationSize 값이 50이면 시퀀스를 한 번에 50 증가 시킨 다음에 1~50까지는 메모리에서 식별자를 할당한다.</p>\n<p>이 최적화 방법은 시퀀스 값을 선점하므로 여러 JVM이 동시에 동작해도 기본 키 값이 충돌하지 않는 장점이 있음 !!</p>\n<h4 id=\"4-table-전략\" style=\"position:relative;\"><a href=\"#4-table-%EC%A0%84%EB%9E%B5\" aria-label=\"4 table 전략 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. TABLE 전략</h4>\n<p>TABLE 전략은 키 생성 전용 테이블을 하나 만들고 여기에 이름과 값을 사용할 컬럼을 만들어 데이터베이스 시퀀스를 흉내내는 전략 !</p>\n<p>테이블을 사용하므로 모든 데이터베이스에 적용 할 수 있다.</p>\n<p><strong>TABLE 전략을 위한 키 테이블 생성</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> MY_SEQUENCES <span class=\"token punctuation\">(</span>\n    sequence_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n    next_val <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>sequence_name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>매핑 코드</strong></p>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@TableGenerator</span><span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ_GENERATOR\"</span><span class=\"token punctuation\">,</span>\n    table <span class=\"token operator\">=</span> <span class=\"token string\">\"MY_SEQUENCES\"</span><span class=\"token punctuation\">,</span>\n    pkColumnValue <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ\"</span><span class=\"token punctuation\">,</span> allocationSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Board</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>TABLE<span class=\"token punctuation\">,</span>\n                generator <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ_GENERATOR\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>시퀀스 대신에 테이블을 사용한다는 것만 제외하면 SEQUENCE 전략과 동일 !\n단, 식별자 값을 조회할 때 Select 쿼리 1번, 다음 값으로 증가시키기 위해 Update 쿼리 1번 사용하기 때문에 <code class=\"language-text\">SEQUENCE 전략보다 1번 더 통신</code>하는 단점이 있음</p>\n<h4 id=\"5-auto-전략\" style=\"position:relative;\"><a href=\"#5-auto-%EC%A0%84%EB%9E%B5\" aria-label=\"5 auto 전략 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. AUTO 전략</h4>\n<p>GenerationType.AUTO는 선택한 데이터베이스 방언에 따라 INDENTITY, SEQUENCE, TABLE 전략 중 하나를 자동으로 선택해줌</p>\n<p>AUTO의 장점은 2가지가 있음</p>\n<ul>\n<li>데이터 베이스가 변경되어도 코드에는 변화가 전혀 없다는 장점</li>\n<li>키 생성 전략이 확정되지 않은 개발 초기 단계, 프로토타입 개발시 편리하다는 장점</li>\n</ul>\n<h4 id=\"6-테이블의-기본-키-선택-전략\" style=\"position:relative;\"><a href=\"#6-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%84%A0%ED%83%9D-%EC%A0%84%EB%9E%B5\" aria-label=\"6 테이블의 기본 키 선택 전략 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 테이블의 기본 키 선택 전략</h4>\n<ul>\n<li>\n<p>자연 키</p>\n<ul>\n<li>비지니스에 의미가 있는 키</li>\n<li>주민등록번호, 이메일, 전화번호</li>\n</ul>\n</li>\n<li>\n<p>대리 키</p>\n<ul>\n<li>비지니스와 관련 없는 임의로 만들어진 키, 대체 키.</li>\n<li>오라클 시퀀스, auto_increment, 키생성 테이블</li>\n</ul>\n</li>\n</ul>\n<p>미래까지 충족하는 자연 키를 찾기 쉽지 않으니 JPA는 모든 엔티티에 일관된 방식으로 대리 키 사용을 권장 !</p>\n<h2 id=\"qa\" style=\"position:relative;\"><a href=\"#qa\" aria-label=\"qa permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q&#x26;A</h2>\n<p><strong>데이터 중심 설계와 객체 지향 설계의 차이?</strong></p>\n<p>객체 지향 설계는 맡은 역할과 책임이 있고 관련 객체를 <code class=\"language-text\">참조로 접근</code> 할 수 있도록 설계하는 것</p>\n<ul>\n<li><code class=\"language-text\">@OneToMany</code>, <code class=\"language-text\">@ManyToOne</code> 등을 사용한 설계는 객체 지향으로 설계되었다고 볼 수 있을 듯</li>\n</ul>\n<p>데이터 중심 설계는 데이터베이스의 <code class=\"language-text\">테이블의 관점</code>에서 설계된 것</p>\n<ul>\n<li><code class=\"language-text\">외래키</code>를 기준으로 조인해서 관련 테이블의 정보를 가져오는 설계는 데이터 중심 설계</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#1-entity\">1. @Entity</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#entity-%EC%A0%81%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">@Entity 적용 시 주의사항</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#%EC%B6%94%EA%B0%80-lombok-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">추가) Lombok 사용 시 주의사항</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#2-table\">2. @Table</a></li>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1\">3. 데이터 베이스 스키마 자동 생성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\">주의 사항</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#4-ddl-%EC%83%9D%EC%84%B1-%EA%B8%B0%EB%8A%A5\">4. DDL 생성 기능</a></li>\n<li>\n<p><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#5-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EB%A7%A4%ED%95%91\">5. 기본 키 매핑</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%83%9D%EC%84%B1-%EC%A0%84%EB%9E%B5-%EC%A2%85%EB%A5%98\">기본 키 생성 전략 종류</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#1-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%A7%81%EC%A0%91-%ED%95%A0%EB%8B%B9-%EC%A0%84%EB%9E%B5\">1. 기본 키 직접 할당 전략</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#2-identity-%EC%A0%84%EB%9E%B5\">2. IDENTITY 전략</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#3-sequence-%EC%A0%84%EB%9E%B5\">3. SEQUENCE 전략</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#4-table-%EC%A0%84%EB%9E%B5\">4. TABLE 전략</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#5-auto-%EC%A0%84%EB%9E%B5\">5. AUTO 전략</a></li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#6-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%84%A0%ED%83%9D-%EC%A0%84%EB%9E%B5\">6. 테이블의 기본 키 선택 전략</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/category/study/jpa-programming/chapter4-entity-mapping/#qa\">Q&#x26;A</a></li>\n</ul>","frontmatter":{"title":"[JPA 프로그래밍] 4. 엔티티 매핑","description":"","date":"2020.10.22","emoji":"⛳️","category":"study"}}},"pageContext":{"slug":"/category/study/jpa-programming/chapter4-entity-mapping/","relatedPosts":[{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter7-persistence-context-and-jpql/"},"frontmatter":{"title":"[JPA 프로그래밍] 7. 영속성 컨텍스트와 JPQL","date":"2020.11.11","emoji":"📦","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter6-object-oriented-query-language/"},"frontmatter":{"title":"[JPA 프로그래밍] 6. 객체지향 쿼리 언어","date":"2020.11.04","emoji":"📝","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter5-relationship-mapping/"},"frontmatter":{"title":"[JPA 프로그래밍] 5. 연관 관계 매핑","date":"2020.10.27","emoji":"🤼‍♂️","category":"study"}}},{"node":{"fields":{"slug":"/category/study/jpa-programming/chapter3-persistence-context/"},"frontmatter":{"title":"[JPA 프로그래밍] 3. 영속성 관리","date":"2020.10.18","emoji":"⏰","category":"study"}}}]}}}